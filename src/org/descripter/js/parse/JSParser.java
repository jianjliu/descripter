/* Generated By:JJTree&JavaCC: Do not edit this line. JSParser.java */
package org.descripter.js.parse;

public class JSParser/*@bgen(jjtree)*/implements JSParserTreeConstants, JSParserConstants {/*@bgen(jjtree)*/
  protected JJTJSParserState jjtree = new JJTJSParserState();void jjtreeOpenNodeScope(Node n) {
                ((AbstractNode)n).firstToken = getToken(1);
        }

        void jjtreeCloseNodeScope(Node n) {
                ((AbstractNode)n).lastToken = getToken(0);
        }

/* ECMA-262 5.1 Edition / June 2011 - Section 7.8: Literals */
  final public void Literal() throws ParseException {
 /*@bgen(jjtree) Literal */
        ECMALiteral jjtn000 = new ECMALiteral(this, JJTLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECIMAL_LITERAL:
        t = jj_consume_token(DECIMAL_LITERAL);
        break;
      case HEX_INTEGER_LITERAL:
        t = jj_consume_token(HEX_INTEGER_LITERAL);
        break;
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
        break;
      case BOOLEAN_LITERAL:
        t = jj_consume_token(BOOLEAN_LITERAL);
        break;
      case NULL_LITERAL:
        t = jj_consume_token(NULL_LITERAL);
        break;
      case REGULAR_EXPRESSION_LITERAL:
        t = jj_consume_token(REGULAR_EXPRESSION_LITERAL);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                jjtn000.jjtSetValue(t.image);
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtreeCloseNodeScope(jjtn000);
  }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 11.1: Primary Expressions */
  final public void PrimaryExpression() throws ParseException {
    if (jj_2_1(2147483647)) {
                            ECMAThisReference jjtn001 = new ECMAThisReference(this, JJTTHISREFERENCE);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                            jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(THIS);
      } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                              jjtreeCloseNodeScope(jjtn001);
                            }
      }
    } else if (jj_2_2(2147483647)) {
      ObjectLiteral();
    } else if (jj_2_3(2147483647)) {
                         ECMAGroup jjtn002 = new ECMAGroup(this, JJTGROUP);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                         jjtreeOpenNodeScope(jjtn002);
      try {
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
      } catch (Throwable jjte002) {
                         if (jjtc002) {
                           jjtree.clearNodeScope(jjtn002);
                           jjtc002 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte002 instanceof RuntimeException) {
                           {if (true) throw (RuntimeException)jjte002;}
                         }
                         if (jjte002 instanceof ParseException) {
                           {if (true) throw (ParseException)jjte002;}
                         }
                         {if (true) throw (Error)jjte002;}
      } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002, true);
                           jjtreeCloseNodeScope(jjtn002);
                         }
      }
    } else if (jj_2_4(2147483647)) {
      Identifier();
    } else if (jj_2_5(2147483647)) {
      ArrayLiteral();
    } else if (jj_2_6(2)) {
      Literal();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 11.1.4: Array Initialiser */
  final public void ArrayLiteral() throws ParseException {
 /*@bgen(jjtree) ArrayLiteral */
  ECMAArrayLiteral jjtn000 = new ECMAArrayLiteral(this, JJTARRAYLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACKET);
      if (jj_2_7(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          Elision();
          break;
        default:
          jj_la1[1] = jj_gen;
          ;
        }
        jj_consume_token(RBRACKET);
      } else if (jj_2_8(2147483647)) {
        ElementList();
        Elision();
        jj_consume_token(RBRACKET);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TYPEOF:
        case NEW:
        case VOID:
        case FUNCTION:
        case THIS:
        case DELETE:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case RBRACKET:
        case COMMA:
        case PLUS:
        case MINUS:
        case INC:
        case DEC:
        case BNOT:
        case NOT:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case DECIMAL_LITERAL:
        case HEX_INTEGER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER_NAME:
        case REGULAR_EXPRESSION_LITERAL:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TYPEOF:
          case NEW:
          case VOID:
          case FUNCTION:
          case THIS:
          case DELETE:
          case LBRACE:
          case LPAREN:
          case LBRACKET:
          case COMMA:
          case PLUS:
          case MINUS:
          case INC:
          case DEC:
          case BNOT:
          case NOT:
          case NULL_LITERAL:
          case BOOLEAN_LITERAL:
          case DECIMAL_LITERAL:
          case HEX_INTEGER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER_NAME:
          case REGULAR_EXPRESSION_LITERAL:
            ElementList();
            break;
          default:
            jj_la1[2] = jj_gen;
            ;
          }
          jj_consume_token(RBRACKET);
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void ElementList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      Elision();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    AssignmentExpression();
    label_1:
    while (true) {
      if (jj_2_9(2147483647)) {
        ;
      } else {
        break label_1;
      }
      Elision();
      AssignmentExpression();
    }
  }

  final public void Elision() throws ParseException {
    label_2:
    while (true) {
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 11.1.5: Object Initialiser */
  final public void ObjectLiteral() throws ParseException {
 /*@bgen(jjtree) ObjectLiteral */
  ECMAObjectLiteral jjtn000 = new ECMAObjectLiteral(this, JJTOBJECTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECIMAL_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
        PropertyNameAndValueList();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void PropertyNameAndValueList() throws ParseException {
    PropertyAssignment();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      if (jj_2_10(2147483647)) {
        jj_consume_token(COMMA);
        PropertyAssignment();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void PropertyAssignment() throws ParseException {
 /*@bgen(jjtree) PropertyAssignment */
  ECMAPropertyAssignment jjtn000 = new ECMAPropertyAssignment(this, JJTPROPERTYASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      PropertyName();
      jj_consume_token(COLON);
      AssignmentExpression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void PropertyName() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER_NAME:
      Identifier();
      break;
    case STRING_LITERAL:
          ECMALiteral jjtn001 = new ECMALiteral(this, JJTLITERAL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(STRING_LITERAL);
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtreeCloseNodeScope(jjtn001);
          }
      }
      break;
    case DECIMAL_LITERAL:
          ECMALiteral jjtn002 = new ECMALiteral(this, JJTLITERAL);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtreeOpenNodeScope(jjtn002);
      try {
        jj_consume_token(DECIMAL_LITERAL);
      } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtreeCloseNodeScope(jjtn002);
          }
      }
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 11.2: Left-Hand-Side Expressions */
  final public void MemberExpression() throws ParseException {
          ECMAAccess jjtn002 = new ECMAAccess(this, JJTACCESS);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtreeOpenNodeScope(jjtn002);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THIS:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
        PrimaryExpression();
        break;
      case FUNCTION:
        FunctionExpression();
        break;
      case NEW:
                          ECMANewOperation jjtn001 = new ECMANewOperation(this, JJTNEWOPERATION);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                          jjtreeOpenNodeScope(jjtn001);
        try {
          jj_consume_token(NEW);
          MemberExpression();
          Arguments();
        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte001;}
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          {if (true) throw (Error)jjte001;}
        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtreeCloseNodeScope(jjtn001);
                          }
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
        case DOT:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_4;
        }
        PropertyAccessor();
      }
    } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
    } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn002);
          }
    }
  }

  final public void NewExpression() throws ParseException {
    if (jj_2_11(2147483647)) {
      MemberExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
          ECMAAllocation jjtn001 = new ECMAAllocation(this, JJTALLOCATION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
        try {
          jj_consume_token(NEW);
          NewExpression();
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtreeCloseNodeScope(jjtn001);
          }
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void PropertyAccessor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
          ECMAArrayAccessor jjtn001 = new ECMAArrayAccessor(this, JJTARRAYACCESSOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(LBRACKET);
        Expression();
        jj_consume_token(RBRACKET);
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtreeCloseNodeScope(jjtn001);
          }
      }
      break;
    case DOT:
          ECMAMemberAccessor jjtn002 = new ECMAMemberAccessor(this, JJTMEMBERACCESSOR);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtreeOpenNodeScope(jjtn002);
      try {
        jj_consume_token(DOT);
        Identifier();
      } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
      } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtreeCloseNodeScope(jjtn002);
          }
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CallExpression() throws ParseException {
 /*@bgen(jjtree) #Access(> 1) */
  ECMAAccess jjtn000 = new ECMAAccess(this, JJTACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      MemberExpression();
      Arguments();
      label_5:
      while (true) {
        if (jj_2_12(2)) {
          ;
        } else {
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          Arguments();
          break;
        case LBRACKET:
        case DOT:
          PropertyAccessor();
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void Arguments() throws ParseException {
 /*@bgen(jjtree) Arguments */
  ECMAArguments jjtn000 = new ECMAArguments(this, JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPEOF:
      case NEW:
      case VOID:
      case FUNCTION:
      case THIS:
      case DELETE:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case PLUS:
      case MINUS:
      case INC:
      case DEC:
      case BNOT:
      case NOT:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
        ArgumentList();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void ArgumentList() throws ParseException {
    AssignmentExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      AssignmentExpression();
    }
  }

  final public void LeftHandSideExpression() throws ParseException {
    if (jj_2_13(2147483647)) {
      CallExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case FUNCTION:
      case THIS:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
        NewExpression();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 11.3 Postfix Expressions */
  final public void PostfixExpression() throws ParseException {
 /*@bgen(jjtree) #PostfixExpression(> 1) */
  ECMAPostfixExpression jjtn000 = new ECMAPostfixExpression(this, JJTPOSTFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      LeftHandSideExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INC:
      case DEC:
                                                  ECMAOperator jjtn001 = new ECMAOperator(this, JJTOPERATOR);
                                                  boolean jjtc001 = true;
                                                  jjtree.openNodeScope(jjtn001);
                                                  jjtreeOpenNodeScope(jjtn001);
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INC:
            jj_consume_token(INC);
            break;
          case DEC:
            jj_consume_token(DEC);
            break;
          default:
            jj_la1[18] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } finally {
                                                  if (jjtc001) {
                                                    jjtree.closeNodeScope(jjtn001, true);
                                                    jjtreeCloseNodeScope(jjtn001);
                                                  }
        }
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 11.4 Unary Operators */
  final public void UnaryExpression() throws ParseException {
 /*@bgen(jjtree) #UnaryExpression(> 1) */
  ECMAUnaryExpression jjtn000 = new ECMAUnaryExpression(this, JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case FUNCTION:
      case THIS:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
        PostfixExpression();
        break;
      case TYPEOF:
      case VOID:
      case DELETE:
      case PLUS:
      case MINUS:
      case INC:
      case DEC:
      case BNOT:
      case NOT:
                  ECMAOperator jjtn001 = new ECMAOperator(this, JJTOPERATOR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtreeOpenNodeScope(jjtn001);
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DELETE:
            jj_consume_token(DELETE);
            break;
          case VOID:
            jj_consume_token(VOID);
            break;
          case TYPEOF:
            jj_consume_token(TYPEOF);
            break;
          case INC:
            jj_consume_token(INC);
            break;
          case DEC:
            jj_consume_token(DEC);
            break;
          case PLUS:
            jj_consume_token(PLUS);
            break;
          case MINUS:
            jj_consume_token(MINUS);
            break;
          case NOT:
            jj_consume_token(NOT);
            break;
          case BNOT:
            jj_consume_token(BNOT);
            break;
          default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtreeCloseNodeScope(jjtn001);
                  }
        }
        UnaryExpression();
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 11.5: Multiplicative Operators */
  final public void MultiplicativeExpression() throws ParseException {
 /*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      UnaryExpression();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MUL:
        case MOD:
        case DIV:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_7;
        }
                              ECMAOperator jjtn001 = new ECMAOperator(this, JJTOPERATOR);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                              jjtreeOpenNodeScope(jjtn001);
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MUL:
            jj_consume_token(MUL);
            break;
          case DIV:
            jj_consume_token(DIV);
            break;
          case MOD:
            jj_consume_token(MOD);
            break;
          default:
            jj_la1[23] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtreeCloseNodeScope(jjtn001);
                              }
        }
        UnaryExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 11.6: Additive Operators */
  final public void AdditiveExpression() throws ParseException {
 /*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      MultiplicativeExpression();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_8;
        }
                                                    ECMAOperator jjtn001 = new ECMAOperator(this, JJTOPERATOR);
                                                    boolean jjtc001 = true;
                                                    jjtree.openNodeScope(jjtn001);
                                                    jjtreeOpenNodeScope(jjtn001);
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PLUS:
            jj_consume_token(PLUS);
            break;
          case MINUS:
            jj_consume_token(MINUS);
            break;
          default:
            jj_la1[25] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } finally {
                                                    if (jjtc001) {
                                                      jjtree.closeNodeScope(jjtn001, true);
                                                      jjtreeCloseNodeScope(jjtn001);
                                                    }
        }
        MultiplicativeExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 11.7: Bitwise Shift Operators */
  final public void ShiftExpression() throws ParseException {
 /*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      AdditiveExpression();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SHL:
        case SHR:
        case SHRU:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_9;
        }
                                 ECMAOperator jjtn001 = new ECMAOperator(this, JJTOPERATOR);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                                 jjtreeOpenNodeScope(jjtn001);
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SHL:
            jj_consume_token(SHL);
            break;
          case SHR:
            jj_consume_token(SHR);
            break;
          case SHRU:
            jj_consume_token(SHRU);
            break;
          default:
            jj_la1[27] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001, true);
                                   jjtreeCloseNodeScope(jjtn001);
                                 }
        }
        AdditiveExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 11.8: Relational Operators */
  final public void RelationalExpression() throws ParseException {
 /*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      ShiftExpression();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INSTANCEOF:
        case IN:
        case LT:
        case GT:
        case LTE:
        case GTE:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_10;
        }
                              ECMAOperator jjtn001 = new ECMAOperator(this, JJTOPERATOR);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                              jjtreeOpenNodeScope(jjtn001);
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INSTANCEOF:
          case LT:
          case GT:
          case LTE:
          case GTE:
            RelationalOperatorNoIn();
            break;
          case IN:
            jj_consume_token(IN);
            break;
          default:
            jj_la1[29] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte001;}
                              }
                              if (jjte001 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte001;}
                              }
                              {if (true) throw (Error)jjte001;}
        } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtreeCloseNodeScope(jjtn001);
                              }
        }
        ShiftExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void RelationalExpressionNoIn() throws ParseException {
 /*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      ShiftExpression();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INSTANCEOF:
        case LT:
        case GT:
        case LTE:
        case GTE:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_11;
        }
                              ECMAOperator jjtn001 = new ECMAOperator(this, JJTOPERATOR);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                              jjtreeOpenNodeScope(jjtn001);
        try {
          RelationalOperatorNoIn();
        } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte001;}
                              }
                              if (jjte001 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte001;}
                              }
                              {if (true) throw (Error)jjte001;}
        } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtreeCloseNodeScope(jjtn001);
                              }
        }
        ShiftExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void RelationalOperatorNoIn() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      jj_consume_token(LT);
      break;
    case GT:
      jj_consume_token(GT);
      break;
    case LTE:
      jj_consume_token(LTE);
      break;
    case GTE:
      jj_consume_token(GTE);
      break;
    case INSTANCEOF:
      jj_consume_token(INSTANCEOF);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 11.9: Equality Operators */
  final public void EqualityExpression() throws ParseException {
 /*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      RelationalExpression();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
        case NE:
        case EQS:
        case NEQS:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_12;
        }
        EqualityOperator();
        RelationalExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void EqualityExpressionNoIn() throws ParseException {
 /*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      RelationalExpressionNoIn();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
        case NE:
        case EQS:
        case NEQS:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_13;
        }
        EqualityOperator();
        RelationalExpressionNoIn();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void EqualityOperator() throws ParseException {
 /*@bgen(jjtree) Operator */
  ECMAOperator jjtn000 = new ECMAOperator(this, JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
        break;
      case NE:
        jj_consume_token(NE);
        break;
      case EQS:
        jj_consume_token(EQS);
        break;
      case NEQS:
        jj_consume_token(NEQS);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 11.10: Binary Bitwise Operators */
  final public void BitwiseANDExpression() throws ParseException {
 /*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      EqualityExpression();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_14;
        }
        BitwiseANDOperator();
        EqualityExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void BitwiseANDExpressionNoIn() throws ParseException {
 /*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      EqualityExpressionNoIn();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_15;
        }
        BitwiseANDOperator();
        EqualityExpressionNoIn();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void BitwiseANDOperator() throws ParseException {
 /*@bgen(jjtree) Operator */
  ECMAOperator jjtn000 = new ECMAOperator(this, JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(AND);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void BitwiseXORExpression() throws ParseException {
 /*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      BitwiseANDExpression();
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case XOR:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_16;
        }
        BitwiseXOROperator();
        BitwiseANDExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void BitwiseXORExpressionNoIn() throws ParseException {
 /*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      BitwiseANDExpressionNoIn();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case XOR:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_17;
        }
        BitwiseXOROperator();
        BitwiseANDExpressionNoIn();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void BitwiseXOROperator() throws ParseException {
 /*@bgen(jjtree) Operator */
  ECMAOperator jjtn000 = new ECMAOperator(this, JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(XOR);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void BitwiseORExpression() throws ParseException {
 /*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      BitwiseXORExpression();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_18;
        }
        BitwiseOROperator();
        BitwiseXORExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void BitwiseORExpressionNoIn() throws ParseException {
 /*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      BitwiseXORExpressionNoIn();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_19;
        }
        BitwiseOROperator();
        BitwiseXORExpressionNoIn();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void BitwiseOROperator() throws ParseException {
 /*@bgen(jjtree) Operator */
  ECMAOperator jjtn000 = new ECMAOperator(this, JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(OR);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 11.11: Binary Logical Operators */
  final public void LogicalANDExpression() throws ParseException {
 /*@bgen(jjtree) #AndOperation(> 1) */
  ECMAAndOperation jjtn000 = new ECMAAndOperation(this, JJTANDOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      BitwiseORExpression();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BAND:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_20;
        }
        LogicalANDOperator();
        BitwiseORExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void LogicalANDExpressionNoIn() throws ParseException {
 /*@bgen(jjtree) #AndOperation(> 1) */
  ECMAAndOperation jjtn000 = new ECMAAndOperation(this, JJTANDOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      BitwiseORExpressionNoIn();
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BAND:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_21;
        }
        LogicalANDOperator();
        BitwiseORExpressionNoIn();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void LogicalANDOperator() throws ParseException {
 /*@bgen(jjtree) Operator */
  ECMAOperator jjtn000 = new ECMAOperator(this, JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(BAND);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void LogicalORExpression() throws ParseException {
 /*@bgen(jjtree) #OrOperation(> 1) */
  ECMAOrOperation jjtn000 = new ECMAOrOperation(this, JJTOROPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      LogicalANDExpression();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOR:
          ;
          break;
        default:
          jj_la1[43] = jj_gen;
          break label_22;
        }
        LogicalOROperator();
        LogicalANDExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void LogicalORExpressionNoIn() throws ParseException {
 /*@bgen(jjtree) #OrOperation(> 1) */
  ECMAOrOperation jjtn000 = new ECMAOrOperation(this, JJTOROPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      LogicalANDExpressionNoIn();
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOR:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_23;
        }
        LogicalOROperator();
        LogicalANDExpressionNoIn();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void LogicalOROperator() throws ParseException {
 /*@bgen(jjtree) Operator */
  ECMAOperator jjtn000 = new ECMAOperator(this, JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(BOR);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 11.12: Conditional Operator */
  final public void ConditionalExpression() throws ParseException {
 /*@bgen(jjtree) #ConditionalExpression(> 1) */
  ECMAConditionalExpression jjtn000 = new ECMAConditionalExpression(this, JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      LogicalORExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUEST:
        jj_consume_token(QUEST);
        AssignmentExpression();
        jj_consume_token(COLON);
        AssignmentExpression();
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void ConditionalExpressionNoIn() throws ParseException {
 /*@bgen(jjtree) #ConditionalExpression(> 1) */
  ECMAConditionalExpression jjtn000 = new ECMAConditionalExpression(this, JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      LogicalORExpressionNoIn();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUEST:
        jj_consume_token(QUEST);
        AssignmentExpression();
        jj_consume_token(COLON);
        AssignmentExpressionNoIn();
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 11.13: Assignment Operators */
  final public void AssignmentExpression() throws ParseException {
 /*@bgen(jjtree) #AssignmentExpression(> 1) */
  ECMAAssignmentExpression jjtn000 = new ECMAAssignmentExpression(this, JJTASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_14(2147483647)) {
        LeftHandSideExpression();
        AssignmentOperator();
        AssignmentExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TYPEOF:
        case NEW:
        case VOID:
        case FUNCTION:
        case THIS:
        case DELETE:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case PLUS:
        case MINUS:
        case INC:
        case DEC:
        case BNOT:
        case NOT:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case DECIMAL_LITERAL:
        case HEX_INTEGER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER_NAME:
        case REGULAR_EXPRESSION_LITERAL:
          ConditionalExpression();
          break;
        default:
          jj_la1[47] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void AssignmentExpressionNoIn() throws ParseException {
 /*@bgen(jjtree) #AssignmentExpression(> 1) */
  ECMAAssignmentExpression jjtn000 = new ECMAAssignmentExpression(this, JJTASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_15(2147483647)) {
        LeftHandSideExpression();
        AssignmentOperator();
        AssignmentExpressionNoIn();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TYPEOF:
        case NEW:
        case VOID:
        case FUNCTION:
        case THIS:
        case DELETE:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case PLUS:
        case MINUS:
        case INC:
        case DEC:
        case BNOT:
        case NOT:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case DECIMAL_LITERAL:
        case HEX_INTEGER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER_NAME:
        case REGULAR_EXPRESSION_LITERAL:
          ConditionalExpressionNoIn();
          break;
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void AssignmentOperator() throws ParseException {
 /*@bgen(jjtree) Operator */
  ECMAOperator jjtn000 = new ECMAOperator(this, JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        break;
      case AMUL:
        jj_consume_token(AMUL);
        break;
      case ADIV:
        jj_consume_token(ADIV);
        break;
      case AMOD:
        jj_consume_token(AMOD);
        break;
      case AADD:
        jj_consume_token(AADD);
        break;
      case ASUB:
        jj_consume_token(ASUB);
        break;
      case ASHL:
        jj_consume_token(ASHL);
        break;
      case ASHR:
        jj_consume_token(ASHR);
        break;
      case ASHRU:
        jj_consume_token(ASHRU);
        break;
      case AAND:
        jj_consume_token(AAND);
        break;
      case AXOR:
        jj_consume_token(AXOR);
        break;
      case AOR:
        jj_consume_token(AOR);
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 11.14: Comma Operator */
  final public void Expression() throws ParseException {
 /*@bgen(jjtree) #CommaExpression(> 1) */
  ECMACommaExpression jjtn000 = new ECMACommaExpression(this, JJTCOMMAEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      AssignmentExpression();
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[50] = jj_gen;
          break label_24;
        }
        jj_consume_token(COMMA);
        AssignmentExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void ExpressionNoIn() throws ParseException {
 /*@bgen(jjtree) #CommaExpression(> 1) */
  ECMACommaExpression jjtn000 = new ECMACommaExpression(this, JJTCOMMAEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      AssignmentExpressionNoIn();
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[51] = jj_gen;
          break label_25;
        }
        jj_consume_token(COMMA);
        AssignmentExpressionNoIn();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 12: STATEMENTS */
  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case JAVA_STATEMENT:
          ECMAJavaStatement jjtn001 = new ECMAJavaStatement(this, JJTJAVASTATEMENT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(JAVA_STATEMENT);
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtreeCloseNodeScope(jjtn001);
          }
      }
      break;
    default:
      jj_la1[52] = jj_gen;
      if (jj_2_16(2147483647)) {
        Block();
      } else if (jj_2_17(2147483647)) {
        VariableStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DEBUGGER:
          DebuggerStatement();
          break;
        case SEMICOLON:
          EmptyStatement();
          break;
        default:
          jj_la1[53] = jj_gen;
          if (jj_2_18(2147483647)) {
            LabelledStatement();
          } else if (jj_2_19(2147483647)) {
            ExpressionStatement();
          } else if (jj_2_20(2147483647)) {
            IfStatement();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DO:
            case FOR:
            case WHILE:
              IterationStatement();
              break;
            default:
              jj_la1[54] = jj_gen;
              if (jj_2_21(2147483647)) {
                ContinueStatement();
              } else if (jj_2_22(2147483647)) {
                BreakStatement();
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case RETURN:
                  ReturnStatement();
                  break;
                case WITH:
                  WithStatement();
                  break;
                case SWITCH:
                  SwitchStatement();
                  break;
                case THROW:
                  ThrowStatement();
                  break;
                case TRY:
                  TryStatement();
                  break;
                default:
                  jj_la1[55] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            }
          }
        }
      }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 12.1 Block Statement */
  final public void Block() throws ParseException {
 /*@bgen(jjtree) Block */
  ECMABlock jjtn000 = new ECMABlock(this, JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case DO:
      case TYPEOF:
      case NEW:
      case VAR:
      case RETURN:
      case VOID:
      case CONTINUE:
      case FOR:
      case SWITCH:
      case WHILE:
      case DEBUGGER:
      case FUNCTION:
      case THIS:
      case WITH:
      case IF:
      case THROW:
      case DELETE:
      case TRY:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case SEMICOLON:
      case PLUS:
      case MINUS:
      case INC:
      case DEC:
      case BNOT:
      case NOT:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
      case JAVA_STATEMENT:
        StatementList();
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void StatementList() throws ParseException {
 /*@bgen(jjtree) #StatementList(> 1) */
  ECMAStatementList jjtn000 = new ECMAStatementList(this, JJTSTATEMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_26:
      while (true) {
        Statement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
        case DO:
        case TYPEOF:
        case NEW:
        case VAR:
        case RETURN:
        case VOID:
        case CONTINUE:
        case FOR:
        case SWITCH:
        case WHILE:
        case DEBUGGER:
        case FUNCTION:
        case THIS:
        case WITH:
        case IF:
        case THROW:
        case DELETE:
        case TRY:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case SEMICOLON:
        case PLUS:
        case MINUS:
        case INC:
        case DEC:
        case BNOT:
        case NOT:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case DECIMAL_LITERAL:
        case HEX_INTEGER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER_NAME:
        case REGULAR_EXPRESSION_LITERAL:
        case JAVA_STATEMENT:
          ;
          break;
        default:
          jj_la1[57] = jj_gen;
          break label_26;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 12.2: Variable statement */
  final public void VariableStatement() throws ParseException {
 /*@bgen(jjtree) VariableStatement */
  ECMAVariableStatement jjtn000 = new ECMAVariableStatement(this, JJTVARIABLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(VAR);
      VariableDeclarationList();
      if (jj_2_23(2)) {
        jj_consume_token(SEMICOLON);
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void VariableDeclarationList() throws ParseException {
 /*@bgen(jjtree) #VariableDeclarationList(> 1) */
  ECMAVariableDeclarationList jjtn000 = new ECMAVariableDeclarationList(this, JJTVARIABLEDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      VariableDeclaration();
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[58] = jj_gen;
          break label_27;
        }
        jj_consume_token(COMMA);
        VariableDeclaration();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void VariableDeclarationListNoIn() throws ParseException {
 /*@bgen(jjtree) #VariableDeclarationList(> 1) */
  ECMAVariableDeclarationList jjtn000 = new ECMAVariableDeclarationList(this, JJTVARIABLEDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      VariableDeclarationNoIn();
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[59] = jj_gen;
          break label_28;
        }
        jj_consume_token(COMMA);
        VariableDeclarationNoIn();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void VariableDeclaration() throws ParseException {
 /*@bgen(jjtree) VariableDeclaration */
  ECMAVariableDeclaration jjtn000 = new ECMAVariableDeclaration(this, JJTVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        Initialiser();
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void VariableDeclarationNoIn() throws ParseException {
 /*@bgen(jjtree) VariableDeclaration */
  ECMAVariableDeclaration jjtn000 = new ECMAVariableDeclaration(this, JJTVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      Identifier();
                       ECMAEmptyExpression jjtn001 = new ECMAEmptyExpression(this, JJTEMPTYEXPRESSION);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                       jjtreeOpenNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          InitialiserNoIn();
          break;
        default:
          jj_la1[61] = jj_gen;
          ;
        }
      } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte001;}
                       }
                       if (jjte001 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte001;}
                       }
                       {if (true) throw (Error)jjte001;}
      } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  jjtree . nodeArity ( ) == 0);
                         jjtreeCloseNodeScope(jjtn001);
                       }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void Initialiser() throws ParseException {
    jj_consume_token(ASSIGN);
    AssignmentExpression();
  }

  final public void InitialiserNoIn() throws ParseException {
    jj_consume_token(ASSIGN);
    AssignmentExpressionNoIn();
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 12.3: Empty Statement */
  final public void EmptyStatement() throws ParseException {
    jj_consume_token(SEMICOLON);
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 12.4: Expression Statement */
  final public void ExpressionStatement() throws ParseException {
 /*@bgen(jjtree) ExpressionStatement */
  ECMAExpressionStatement jjtn000 = new ECMAExpressionStatement(this, JJTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      Expression();
      if (jj_2_24(2)) {
        jj_consume_token(SEMICOLON);
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 12.5: The if Statement */
  final public void IfStatement() throws ParseException {
 /*@bgen(jjtree) IfStatement */
  ECMAIfStatement jjtn000 = new ECMAIfStatement(this, JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        Statement();
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 12.6: Iteration Statements */
  final public void IterationStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DO:
          ECMADoWhileStatement jjtn001 = new ECMADoWhileStatement(this, JJTDOWHILESTATEMENT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(DO);
        Statement();
        jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        if (jj_2_25(2)) {
          jj_consume_token(SEMICOLON);
        } else {
          ;
        }
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtreeCloseNodeScope(jjtn001);
          }
      }
      break;
    case WHILE:
          ECMAWhileStatement jjtn002 = new ECMAWhileStatement(this, JJTWHILESTATEMENT);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtreeOpenNodeScope(jjtn002);
      try {
        jj_consume_token(WHILE);
        jj_consume_token(LPAREN);
        Expression();
        jj_consume_token(RPAREN);
        Statement();
      } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
      } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtreeCloseNodeScope(jjtn002);
          }
      }
      break;
    default:
      jj_la1[68] = jj_gen;
      if (jj_2_26(2147483647)) {
                                                       ECMAForStatement jjtn006 = new ECMAForStatement(this, JJTFORSTATEMENT);
                                                       boolean jjtc006 = true;
                                                       jjtree.openNodeScope(jjtn006);
                                                       jjtreeOpenNodeScope(jjtn006);
        try {
          jj_consume_token(FOR);
          jj_consume_token(LPAREN);
                                                                   ECMAEmptyExpression jjtn003 = new ECMAEmptyExpression(this, JJTEMPTYEXPRESSION);
                                                                   boolean jjtc003 = true;
                                                                   jjtree.openNodeScope(jjtn003);
                                                                   jjtreeOpenNodeScope(jjtn003);
          try {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case TYPEOF:
            case NEW:
            case VOID:
            case FUNCTION:
            case THIS:
            case DELETE:
            case LBRACE:
            case LPAREN:
            case LBRACKET:
            case PLUS:
            case MINUS:
            case INC:
            case DEC:
            case BNOT:
            case NOT:
            case NULL_LITERAL:
            case BOOLEAN_LITERAL:
            case DECIMAL_LITERAL:
            case HEX_INTEGER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER_NAME:
            case REGULAR_EXPRESSION_LITERAL:
              ExpressionNoIn();
              break;
            default:
              jj_la1[63] = jj_gen;
              ;
            }
          } catch (Throwable jjte003) {
                                                                   if (jjtc003) {
                                                                     jjtree.clearNodeScope(jjtn003);
                                                                     jjtc003 = false;
                                                                   } else {
                                                                     jjtree.popNode();
                                                                   }
                                                                   if (jjte003 instanceof RuntimeException) {
                                                                     {if (true) throw (RuntimeException)jjte003;}
                                                                   }
                                                                   if (jjte003 instanceof ParseException) {
                                                                     {if (true) throw (ParseException)jjte003;}
                                                                   }
                                                                   {if (true) throw (Error)jjte003;}
          } finally {
                                                                   if (jjtc003) {
                                                                     jjtree.closeNodeScope(jjtn003,  jjtree . nodeArity ( ) == 0);
                                                                     jjtreeCloseNodeScope(jjtn003);
                                                                   }
          }
          jj_consume_token(SEMICOLON);
                                                                                                                                     ECMAEmptyExpression jjtn004 = new ECMAEmptyExpression(this, JJTEMPTYEXPRESSION);
                                                                                                                                     boolean jjtc004 = true;
                                                                                                                                     jjtree.openNodeScope(jjtn004);
                                                                                                                                     jjtreeOpenNodeScope(jjtn004);
          try {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case TYPEOF:
            case NEW:
            case VOID:
            case FUNCTION:
            case THIS:
            case DELETE:
            case LBRACE:
            case LPAREN:
            case LBRACKET:
            case PLUS:
            case MINUS:
            case INC:
            case DEC:
            case BNOT:
            case NOT:
            case NULL_LITERAL:
            case BOOLEAN_LITERAL:
            case DECIMAL_LITERAL:
            case HEX_INTEGER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER_NAME:
            case REGULAR_EXPRESSION_LITERAL:
              Expression();
              break;
            default:
              jj_la1[64] = jj_gen;
              ;
            }
          } catch (Throwable jjte004) {
                                                                                                                                     if (jjtc004) {
                                                                                                                                       jjtree.clearNodeScope(jjtn004);
                                                                                                                                       jjtc004 = false;
                                                                                                                                     } else {
                                                                                                                                       jjtree.popNode();
                                                                                                                                     }
                                                                                                                                     if (jjte004 instanceof RuntimeException) {
                                                                                                                                       {if (true) throw (RuntimeException)jjte004;}
                                                                                                                                     }
                                                                                                                                     if (jjte004 instanceof ParseException) {
                                                                                                                                       {if (true) throw (ParseException)jjte004;}
                                                                                                                                     }
                                                                                                                                     {if (true) throw (Error)jjte004;}
          } finally {
                                                                                                                                     if (jjtc004) {
                                                                                                                                       jjtree.closeNodeScope(jjtn004,  jjtree . nodeArity ( ) == 0);
                                                                                                                                       jjtreeCloseNodeScope(jjtn004);
                                                                                                                                     }
          }
          jj_consume_token(SEMICOLON);
                                                                                                                                                                                                   ECMAEmptyExpression jjtn005 = new ECMAEmptyExpression(this, JJTEMPTYEXPRESSION);
                                                                                                                                                                                                   boolean jjtc005 = true;
                                                                                                                                                                                                   jjtree.openNodeScope(jjtn005);
                                                                                                                                                                                                   jjtreeOpenNodeScope(jjtn005);
          try {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case TYPEOF:
            case NEW:
            case VOID:
            case FUNCTION:
            case THIS:
            case DELETE:
            case LBRACE:
            case LPAREN:
            case LBRACKET:
            case PLUS:
            case MINUS:
            case INC:
            case DEC:
            case BNOT:
            case NOT:
            case NULL_LITERAL:
            case BOOLEAN_LITERAL:
            case DECIMAL_LITERAL:
            case HEX_INTEGER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER_NAME:
            case REGULAR_EXPRESSION_LITERAL:
              Expression();
              break;
            default:
              jj_la1[65] = jj_gen;
              ;
            }
          } catch (Throwable jjte005) {
                                                                                                                                                                                                   if (jjtc005) {
                                                                                                                                                                                                     jjtree.clearNodeScope(jjtn005);
                                                                                                                                                                                                     jjtc005 = false;
                                                                                                                                                                                                   } else {
                                                                                                                                                                                                     jjtree.popNode();
                                                                                                                                                                                                   }
                                                                                                                                                                                                   if (jjte005 instanceof RuntimeException) {
                                                                                                                                                                                                     {if (true) throw (RuntimeException)jjte005;}
                                                                                                                                                                                                   }
                                                                                                                                                                                                   if (jjte005 instanceof ParseException) {
                                                                                                                                                                                                     {if (true) throw (ParseException)jjte005;}
                                                                                                                                                                                                   }
                                                                                                                                                                                                   {if (true) throw (Error)jjte005;}
          } finally {
                                                                                                                                                                                                   if (jjtc005) {
                                                                                                                                                                                                     jjtree.closeNodeScope(jjtn005,  jjtree . nodeArity ( ) == 0);
                                                                                                                                                                                                     jjtreeCloseNodeScope(jjtn005);
                                                                                                                                                                                                   }
          }
          jj_consume_token(RPAREN);
          Statement();
        } catch (Throwable jjte006) {
                                                       if (jjtc006) {
                                                         jjtree.clearNodeScope(jjtn006);
                                                         jjtc006 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte006 instanceof RuntimeException) {
                                                         {if (true) throw (RuntimeException)jjte006;}
                                                       }
                                                       if (jjte006 instanceof ParseException) {
                                                         {if (true) throw (ParseException)jjte006;}
                                                       }
                                                       {if (true) throw (Error)jjte006;}
        } finally {
                                                       if (jjtc006) {
                                                         jjtree.closeNodeScope(jjtn006, true);
                                                         jjtreeCloseNodeScope(jjtn006);
                                                       }
        }
      } else if (jj_2_27(2147483647)) {
                                                                   ECMAForVarStatement jjtn009 = new ECMAForVarStatement(this, JJTFORVARSTATEMENT);
                                                                   boolean jjtc009 = true;
                                                                   jjtree.openNodeScope(jjtn009);
                                                                   jjtreeOpenNodeScope(jjtn009);
        try {
          jj_consume_token(FOR);
          jj_consume_token(LPAREN);
          jj_consume_token(VAR);
          VariableDeclarationList();
          jj_consume_token(SEMICOLON);
                                                                                                                   ECMAEmptyExpression jjtn007 = new ECMAEmptyExpression(this, JJTEMPTYEXPRESSION);
                                                                                                                   boolean jjtc007 = true;
                                                                                                                   jjtree.openNodeScope(jjtn007);
                                                                                                                   jjtreeOpenNodeScope(jjtn007);
          try {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case TYPEOF:
            case NEW:
            case VOID:
            case FUNCTION:
            case THIS:
            case DELETE:
            case LBRACE:
            case LPAREN:
            case LBRACKET:
            case PLUS:
            case MINUS:
            case INC:
            case DEC:
            case BNOT:
            case NOT:
            case NULL_LITERAL:
            case BOOLEAN_LITERAL:
            case DECIMAL_LITERAL:
            case HEX_INTEGER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER_NAME:
            case REGULAR_EXPRESSION_LITERAL:
              Expression();
              break;
            default:
              jj_la1[66] = jj_gen;
              ;
            }
          } catch (Throwable jjte007) {
                                                                                                                   if (jjtc007) {
                                                                                                                     jjtree.clearNodeScope(jjtn007);
                                                                                                                     jjtc007 = false;
                                                                                                                   } else {
                                                                                                                     jjtree.popNode();
                                                                                                                   }
                                                                                                                   if (jjte007 instanceof RuntimeException) {
                                                                                                                     {if (true) throw (RuntimeException)jjte007;}
                                                                                                                   }
                                                                                                                   if (jjte007 instanceof ParseException) {
                                                                                                                     {if (true) throw (ParseException)jjte007;}
                                                                                                                   }
                                                                                                                   {if (true) throw (Error)jjte007;}
          } finally {
                                                                                                                   if (jjtc007) {
                                                                                                                     jjtree.closeNodeScope(jjtn007,  jjtree . nodeArity ( ) == 0);
                                                                                                                     jjtreeCloseNodeScope(jjtn007);
                                                                                                                   }
          }
          jj_consume_token(SEMICOLON);
                                                                                                                                                                                 ECMAEmptyExpression jjtn008 = new ECMAEmptyExpression(this, JJTEMPTYEXPRESSION);
                                                                                                                                                                                 boolean jjtc008 = true;
                                                                                                                                                                                 jjtree.openNodeScope(jjtn008);
                                                                                                                                                                                 jjtreeOpenNodeScope(jjtn008);
          try {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case TYPEOF:
            case NEW:
            case VOID:
            case FUNCTION:
            case THIS:
            case DELETE:
            case LBRACE:
            case LPAREN:
            case LBRACKET:
            case PLUS:
            case MINUS:
            case INC:
            case DEC:
            case BNOT:
            case NOT:
            case NULL_LITERAL:
            case BOOLEAN_LITERAL:
            case DECIMAL_LITERAL:
            case HEX_INTEGER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER_NAME:
            case REGULAR_EXPRESSION_LITERAL:
              Expression();
              break;
            default:
              jj_la1[67] = jj_gen;
              ;
            }
          } catch (Throwable jjte008) {
                                                                                                                                                                                 if (jjtc008) {
                                                                                                                                                                                   jjtree.clearNodeScope(jjtn008);
                                                                                                                                                                                   jjtc008 = false;
                                                                                                                                                                                 } else {
                                                                                                                                                                                   jjtree.popNode();
                                                                                                                                                                                 }
                                                                                                                                                                                 if (jjte008 instanceof RuntimeException) {
                                                                                                                                                                                   {if (true) throw (RuntimeException)jjte008;}
                                                                                                                                                                                 }
                                                                                                                                                                                 if (jjte008 instanceof ParseException) {
                                                                                                                                                                                   {if (true) throw (ParseException)jjte008;}
                                                                                                                                                                                 }
                                                                                                                                                                                 {if (true) throw (Error)jjte008;}
          } finally {
                                                                                                                                                                                 if (jjtc008) {
                                                                                                                                                                                   jjtree.closeNodeScope(jjtn008,  jjtree . nodeArity ( ) == 0);
                                                                                                                                                                                   jjtreeCloseNodeScope(jjtn008);
                                                                                                                                                                                 }
          }
          jj_consume_token(RPAREN);
          Statement();
        } catch (Throwable jjte009) {
                                                                   if (jjtc009) {
                                                                     jjtree.clearNodeScope(jjtn009);
                                                                     jjtc009 = false;
                                                                   } else {
                                                                     jjtree.popNode();
                                                                   }
                                                                   if (jjte009 instanceof RuntimeException) {
                                                                     {if (true) throw (RuntimeException)jjte009;}
                                                                   }
                                                                   if (jjte009 instanceof ParseException) {
                                                                     {if (true) throw (ParseException)jjte009;}
                                                                   }
                                                                   {if (true) throw (Error)jjte009;}
        } finally {
                                                                   if (jjtc009) {
                                                                     jjtree.closeNodeScope(jjtn009, true);
                                                                     jjtreeCloseNodeScope(jjtn009);
                                                                   }
        }
      } else if (jj_2_28(2147483647)) {
                                                                    ECMAForVarInStatement jjtn010 = new ECMAForVarInStatement(this, JJTFORVARINSTATEMENT);
                                                                    boolean jjtc010 = true;
                                                                    jjtree.openNodeScope(jjtn010);
                                                                    jjtreeOpenNodeScope(jjtn010);
        try {
          jj_consume_token(FOR);
          jj_consume_token(LPAREN);
          jj_consume_token(VAR);
          VariableDeclarationNoIn();
          jj_consume_token(IN);
          Expression();
          jj_consume_token(RPAREN);
          Statement();
        } catch (Throwable jjte010) {
                                                                    if (jjtc010) {
                                                                      jjtree.clearNodeScope(jjtn010);
                                                                      jjtc010 = false;
                                                                    } else {
                                                                      jjtree.popNode();
                                                                    }
                                                                    if (jjte010 instanceof RuntimeException) {
                                                                      {if (true) throw (RuntimeException)jjte010;}
                                                                    }
                                                                    if (jjte010 instanceof ParseException) {
                                                                      {if (true) throw (ParseException)jjte010;}
                                                                    }
                                                                    {if (true) throw (Error)jjte010;}
        } finally {
                                                                    if (jjtc010) {
                                                                      jjtree.closeNodeScope(jjtn010, true);
                                                                      jjtreeCloseNodeScope(jjtn010);
                                                                    }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOR:
          ECMAForInStatement jjtn011 = new ECMAForInStatement(this, JJTFORINSTATEMENT);
          boolean jjtc011 = true;
          jjtree.openNodeScope(jjtn011);
          jjtreeOpenNodeScope(jjtn011);
          try {
            jj_consume_token(FOR);
            jj_consume_token(LPAREN);
            LeftHandSideExpression();
            jj_consume_token(IN);
            Expression();
            jj_consume_token(RPAREN);
            Statement();
          } catch (Throwable jjte011) {
          if (jjtc011) {
            jjtree.clearNodeScope(jjtn011);
            jjtc011 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte011 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte011;}
          }
          if (jjte011 instanceof ParseException) {
            {if (true) throw (ParseException)jjte011;}
          }
          {if (true) throw (Error)jjte011;}
          } finally {
          if (jjtc011) {
            jjtree.closeNodeScope(jjtn011, true);
            jjtreeCloseNodeScope(jjtn011);
          }
          }
          break;
        default:
          jj_la1[69] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 12.7: The continue Statement */
  final public void ContinueStatement() throws ParseException {
 /*@bgen(jjtree) ContinueStatement */
  ECMAContinueStatement jjtn000 = new ECMAContinueStatement(this, JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(CONTINUE);
      if (jj_2_29(2147483647)) {
        Identifier();
      } else {
        ;
      }
      if (jj_2_30(2147483647)) {
        jj_consume_token(SEMICOLON);
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 12.8: The break Statement */
  final public void BreakStatement() throws ParseException {
 /*@bgen(jjtree) BreakStatement */
  ECMABreakStatement jjtn000 = new ECMABreakStatement(this, JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(BREAK);
      if (jj_2_31(2147483647)) {
        Identifier();
      } else {
        ;
      }
      if (jj_2_32(2147483647)) {
        jj_consume_token(SEMICOLON);
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 12.9 The return Statement */
  final public void ReturnStatement() throws ParseException {
 /*@bgen(jjtree) ReturnStatement */
  ECMAReturnStatement jjtn000 = new ECMAReturnStatement(this, JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
      if (jj_2_33(2147483647)) {
        Expression();
      } else {
        ;
      }
      if (jj_2_34(2147483647)) {
        jj_consume_token(SEMICOLON);
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 12.10: The with Statement */
  final public void WithStatement() throws ParseException {
 /*@bgen(jjtree) WithStatement */
  ECMAWithStatement jjtn000 = new ECMAWithStatement(this, JJTWITHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(WITH);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Statement();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - 12.11 The switch Statement */
  final public void SwitchStatement() throws ParseException {
 /*@bgen(jjtree) SwitchStatement */
  ECMASwitchStatement jjtn000 = new ECMASwitchStatement(this, JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      CaseBlock();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void CaseBlock() throws ParseException {
 /*@bgen(jjtree) CaseBlock */
  ECMACaseBlock jjtn000 = new ECMACaseBlock(this, JJTCASEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        CaseClauses();
        break;
      default:
        jj_la1[70] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RBRACE:
        jj_consume_token(RBRACE);
        break;
      case DEFAULT_:
        DefaultClause();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
          CaseClauses();
          break;
        default:
          jj_la1[71] = jj_gen;
          ;
        }
        jj_consume_token(RBRACE);
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void CaseClauses() throws ParseException {
    label_29:
    while (true) {
      CaseClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        ;
        break;
      default:
        jj_la1[73] = jj_gen;
        break label_29;
      }
    }
  }

  final public void CaseClause() throws ParseException {
 /*@bgen(jjtree) CaseClause */
  ECMACaseClause jjtn000 = new ECMACaseClause(this, JJTCASECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
            ECMACase jjtn001 = new ECMACase(this, JJTCASE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(CASE);
        Expression();
        jj_consume_token(COLON);
      } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              jjtreeCloseNodeScope(jjtn001);
            }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case DO:
      case TYPEOF:
      case NEW:
      case VAR:
      case RETURN:
      case VOID:
      case CONTINUE:
      case FOR:
      case SWITCH:
      case WHILE:
      case DEBUGGER:
      case FUNCTION:
      case THIS:
      case WITH:
      case IF:
      case THROW:
      case DELETE:
      case TRY:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case SEMICOLON:
      case PLUS:
      case MINUS:
      case INC:
      case DEC:
      case BNOT:
      case NOT:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
      case JAVA_STATEMENT:
        StatementList();
        break;
      default:
        jj_la1[74] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void DefaultClause() throws ParseException {
 /*@bgen(jjtree) CaseClause */
  ECMACaseClause jjtn000 = new ECMACaseClause(this, JJTCASECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
            ECMACase jjtn001 = new ECMACase(this, JJTCASE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(DEFAULT_);
        jj_consume_token(COLON);
      } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              jjtreeCloseNodeScope(jjtn001);
            }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case DO:
      case TYPEOF:
      case NEW:
      case VAR:
      case RETURN:
      case VOID:
      case CONTINUE:
      case FOR:
      case SWITCH:
      case WHILE:
      case DEBUGGER:
      case FUNCTION:
      case THIS:
      case WITH:
      case IF:
      case THROW:
      case DELETE:
      case TRY:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case SEMICOLON:
      case PLUS:
      case MINUS:
      case INC:
      case DEC:
      case BNOT:
      case NOT:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
      case JAVA_STATEMENT:
        StatementList();
        break;
      default:
        jj_la1[75] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 12.12: Labelled Statements */
  final public void LabelledStatement() throws ParseException {
 /*@bgen(jjtree) LabelledStatement */
  ECMALabelledStatement jjtn000 = new ECMALabelledStatement(this, JJTLABELLEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      Identifier();
      jj_consume_token(COLON);
      Statement();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void ThrowStatement() throws ParseException {
 /*@bgen(jjtree) ThrowStatement */
  ECMAThrowStatement jjtn000 = new ECMAThrowStatement(this, JJTTHROWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(THROW);
      Expression();
      if (jj_2_35(2147483647)) {
        jj_consume_token(SEMICOLON);
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void TryStatement() throws ParseException {
 /*@bgen(jjtree) TryStatement */
  ECMATryStatement jjtn000 = new ECMATryStatement(this, JJTTRYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(TRY);
      Block();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINALLY:
        Finally();
        break;
      case CATCH:
        Catch();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINALLY:
          Finally();
          break;
        default:
          jj_la1[76] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[77] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void Catch() throws ParseException {
 /*@bgen(jjtree) Catch */
  ECMACatch jjtn000 = new ECMACatch(this, JJTCATCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(CATCH);
      jj_consume_token(LPAREN);
      Identifier();
      jj_consume_token(RPAREN);
      Block();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void Finally() throws ParseException {
 /*@bgen(jjtree) Finally */
  ECMAFinally jjtn000 = new ECMAFinally(this, JJTFINALLY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(FINALLY);
      Block();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 12.15 The debugger Statement */
  final public void DebuggerStatement() throws ParseException {
 /*@bgen(jjtree) DebuggerStatement */
  ECMADebuggerStatement jjtn000 = new ECMADebuggerStatement(this, JJTDEBUGGERSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(DEBUGGER);
      if (jj_2_36(2147483647)) {
        jj_consume_token(SEMICOLON);
      } else {
        ;
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 13: Function Definition */
  final public void FunctionDeclaration() throws ParseException {
 /*@bgen(jjtree) FunctionDeclaration */
  ECMAFunctionDeclaration jjtn000 = new ECMAFunctionDeclaration(this, JJTFUNCTIONDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(FUNCTION);
      Identifier();
                                  ECMAFormalParameterList jjtn001 = new ECMAFormalParameterList(this, JJTFORMALPARAMETERLIST);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER_NAME:
          FormalParameterList();
          break;
        default:
          jj_la1[78] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
      } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte001;}
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte001;}
                                  }
                                  {if (true) throw (Error)jjte001;}
      } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtreeCloseNodeScope(jjtn001);
                                  }
      }
      FunctionBody();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void FunctionExpression() throws ParseException {
 /*@bgen(jjtree) FunctionExpression */
  ECMAFunctionExpression jjtn000 = new ECMAFunctionExpression(this, JJTFUNCTIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(FUNCTION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER_NAME:
        Identifier();
        break;
      default:
        jj_la1[79] = jj_gen;
        ;
      }
                                       ECMAFormalParameterList jjtn001 = new ECMAFormalParameterList(this, JJTFORMALPARAMETERLIST);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                       jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER_NAME:
          FormalParameterList();
          break;
        default:
          jj_la1[80] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
      } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte001;}
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte001;}
                                       }
                                       {if (true) throw (Error)jjte001;}
      } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001, true);
                                         jjtreeCloseNodeScope(jjtn001);
                                       }
      }
      FunctionBody();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void FormalParameterList() throws ParseException {
    Identifier();
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[81] = jj_gen;
        break label_30;
      }
      jj_consume_token(COMMA);
      Identifier();
    }
  }

  final public void FunctionBody() throws ParseException {
 /*@bgen(jjtree) Block */
  ECMABlock jjtn000 = new ECMABlock(this, JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case DO:
      case TYPEOF:
      case NEW:
      case VAR:
      case RETURN:
      case VOID:
      case CONTINUE:
      case FOR:
      case SWITCH:
      case WHILE:
      case DEBUGGER:
      case FUNCTION:
      case THIS:
      case WITH:
      case IF:
      case THROW:
      case DELETE:
      case TRY:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case SEMICOLON:
      case PLUS:
      case MINUS:
      case INC:
      case DEC:
      case BNOT:
      case NOT:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
      case JAVA_STATEMENT:
        SourceElements();
        break;
      default:
        jj_la1[82] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 14: Script */
  final public ECMAProgram Program() throws ParseException {
 /*@bgen(jjtree) Program */
  ECMAProgram jjtn000 = new ECMAProgram(this, JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case DO:
      case TYPEOF:
      case NEW:
      case VAR:
      case RETURN:
      case VOID:
      case CONTINUE:
      case FOR:
      case SWITCH:
      case WHILE:
      case DEBUGGER:
      case FUNCTION:
      case THIS:
      case WITH:
      case IF:
      case THROW:
      case DELETE:
      case TRY:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case SEMICOLON:
      case PLUS:
      case MINUS:
      case INC:
      case DEC:
      case BNOT:
      case NOT:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
      case JAVA_STATEMENT:
        SourceElements();
        break;
      default:
        jj_la1[83] = jj_gen;
        ;
      }
      jj_consume_token(0);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void SourceElements() throws ParseException {
    label_31:
    while (true) {
      SourceElement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case DO:
      case TYPEOF:
      case NEW:
      case VAR:
      case RETURN:
      case VOID:
      case CONTINUE:
      case FOR:
      case SWITCH:
      case WHILE:
      case DEBUGGER:
      case FUNCTION:
      case THIS:
      case WITH:
      case IF:
      case THROW:
      case DELETE:
      case TRY:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case SEMICOLON:
      case PLUS:
      case MINUS:
      case INC:
      case DEC:
      case BNOT:
      case NOT:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
      case JAVA_STATEMENT:
        ;
        break;
      default:
        jj_la1[84] = jj_gen;
        break label_31;
      }
    }
  }

  final public void SourceElement() throws ParseException {
    if (jj_2_37(2147483647)) {
      FunctionDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case DO:
      case TYPEOF:
      case NEW:
      case VAR:
      case RETURN:
      case VOID:
      case CONTINUE:
      case FOR:
      case SWITCH:
      case WHILE:
      case DEBUGGER:
      case FUNCTION:
      case THIS:
      case WITH:
      case IF:
      case THROW:
      case DELETE:
      case TRY:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case SEMICOLON:
      case PLUS:
      case MINUS:
      case INC:
      case DEC:
      case BNOT:
      case NOT:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:
      case JAVA_STATEMENT:
        Statement();
        break;
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/* ECMA-262 5.1 Edition / June 2011 - Section 7.6: Identifiers */
  final public void Identifier() throws ParseException {
 /*@bgen(jjtree) Identifier */
        ECMAIdentifier jjtn000 = new ECMAIdentifier(this, JJTIDENTIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER_NAME);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
                jjtn000.jjtSetValue(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_39()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_3R_42()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_227()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(WITH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_121()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_39()) return true;
    if (jj_3R_60()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_39()) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_188()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_185()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_186()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_112()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_149() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_164() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) return true;
    }
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_112()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_59()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_49()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_55()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_164()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_36()) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_35()) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_36()) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_32()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    if (jj_scan_token(51)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(51)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_32()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_52()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_3R_35()) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_66()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_67()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_47()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3_6()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    Token xsp;
    if (jj_3R_102()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_102()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_3R_156()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_32()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_3R_154()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_3R_153()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_3R_152()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_3R_151()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_scan_token(JAVA_STATEMENT)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_84()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_85()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_69()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(QUEST)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_42()) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_42()) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(QUEST)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_42()) return true;
    if (jj_3R_43()) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_3R_117()) return true;
    if (jj_3R_157()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_42()) return true;
    if (jj_3R_43()) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_137()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_117()) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_90()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_3R_142()) return true;
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(BOR)) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_3R_157()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_158()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_142()) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_108()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_109()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_3R_163()) return true;
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(BAND)) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_3R_178()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_179()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_3R_163()) return true;
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_115()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_116()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_3R_182()) return true;
    if (jj_3R_202()) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_3R_194()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_195()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_3R_182()) return true;
    if (jj_3R_161()) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_140()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_141()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_3R_198()) return true;
    if (jj_3R_209()) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_scan_token(XOR)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_3R_202()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_203()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) return true;
    }
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_3R_198()) return true;
    if (jj_3R_180()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_139()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_3R_161()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_162()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_107() {
    Token xsp;
    if (jj_3R_114()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_114()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_3R_206()) return true;
    if (jj_3R_215()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_3R_209()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_210()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_3R_206()) return true;
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_3R_180()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_181()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_106()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_3R_191()) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_206() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(FUNCTION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_98()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_3R_219()) return true;
    if (jj_3R_204()) return true;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_3R_215()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_216()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_3R_192()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_193()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_3R_219()) return true;
    return false;
  }

  private boolean jj_3R_205() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    if (jj_3R_204()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_3R_196()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_197()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_212() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    }
    }
    if (jj_3R_211()) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(DEBUGGER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_218() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) return true;
    }
    if (jj_3R_217()) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_3R_191()) return true;
    return false;
  }

  private boolean jj_3R_219() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_3R_204()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_221()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_3R_199()) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_3R_204()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_205()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_223() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    if (jj_3R_222()) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) return true;
    }
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_3R_211()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_212()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_49()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_3R_200()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_201()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_3R_217()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_218()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_3R_32()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_3R_222()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_223()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(DEFAULT_)) return true;
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_208()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_227() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) return true;
    }
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_220()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_3R_214()) return true;
    return false;
  }

  private boolean jj_3R_199() {
    Token xsp;
    if (jj_3R_207()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_207()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_3R_199()) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_3R_190()) return true;
    }
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_225() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_222()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_3R_226()) return true;
    return false;
  }

  private boolean jj_3R_222() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) return true;
    }
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public JSParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[86];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x10900000,0x10900000,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x800000,0x0,0x0,0x10900000,0x0,0x800000,0x0,0x0,0x10100000,0x10900000,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x80000,0x80000,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10900000,0x10900000,0x0,0x0,0x0,0x0,0x0,0x40040000,0x88000000,0xf9960000,0xf9960000,0x0,0x0,0x0,0x0,0x400000,0x10900000,0x10900000,0x10900000,0x10900000,0x10900000,0x40000,0x40000000,0x200000,0x200000,0x0,0x200000,0xf9960000,0xf9960000,0x4000000,0x6000000,0x0,0x0,0x0,0x0,0xf9960000,0xf9960000,0xf9960000,0xf9960000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x80000,0x3008a90c,0x3009a90c,0x80000,0x80000,0x0,0x80000,0x80000,0x0,0xa80c,0x28000,0x0,0x28000,0x2a000,0x3000a90c,0x80000,0xa80c,0x0,0x0,0x30000100,0x3000a90c,0xc0000000,0xc0000000,0x30000000,0x30000000,0x0,0x0,0xf00200,0xf00200,0xf00000,0xf00000,0xf000000,0xf000000,0xf000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3000a90c,0x3000a90c,0x0,0x80000,0x80000,0x0,0x40002,0x1,0x490,0x3004addf,0x3004addf,0x80000,0x80000,0x0,0x0,0x0,0x3000a90c,0x3000a90c,0x3000a90c,0x3000a90c,0x3000a90c,0x1,0x0,0x0,0x0,0x1020,0x0,0x3004addf,0x3004addf,0x0,0x0,0x0,0x0,0x0,0x80000,0x3004addf,0x3004addf,0x3004addf,0x3004addf,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x38000000,0x0,0x38000303,0x38000303,0x0,0x0,0x20000000,0x0,0x0,0x20000000,0x38000000,0x0,0x0,0x0,0x0,0x38000303,0x0,0x38000000,0x3,0x3,0x303,0x38000303,0x2000000,0x2000000,0x0,0x0,0x1c,0x1c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x80,0x80,0x40,0x40,0x400,0x400,0x800,0x800,0x1000,0x1000,0x38000303,0x38000303,0x5ffc000,0x0,0x0,0x0,0x0,0x0,0x0,0x38000303,0x38000303,0x0,0x0,0x4000,0x4000,0x0,0x38000303,0x38000303,0x38000303,0x38000303,0x38000303,0x0,0x0,0x0,0x0,0x0,0x0,0x38000303,0x38000303,0x0,0x0,0x0,0x0,0x0,0x0,0x38000303,0x38000303,0x38000303,0x38000303,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x40000060,0x0,0x40020060,0x40020060,0x0,0x0,0x20040,0x0,0x0,0x20040,0x40020060,0x0,0x0,0x0,0x0,0x40020060,0x0,0x40020060,0x0,0x0,0x0,0x40020060,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40020060,0x40020060,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40020060,0x40020060,0x0,0x0,0x0,0x0,0x0,0x40020060,0x40020060,0x40020060,0x40020060,0x40020060,0x0,0x0,0x0,0x0,0x0,0x0,0x40020060,0x40020060,0x0,0x0,0x20000,0x20000,0x20000,0x0,0x40020060,0x40020060,0x40020060,0x40020060,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x2,0x2,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[37];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JSParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JSParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JSParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new JSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JSParser(JSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[131];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 86; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 131; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 37; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
