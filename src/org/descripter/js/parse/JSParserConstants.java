/* Generated By:JJTree&JavaCC: Do not edit this line. JSParserConstants.java */
package org.descripter.js.parse;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JSParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int TAB = 1;
  /** RegularExpression Id. */
  int VT = 2;
  /** RegularExpression Id. */
  int FF = 3;
  /** RegularExpression Id. */
  int SP = 4;
  /** RegularExpression Id. */
  int NBSP = 5;
  /** RegularExpression Id. */
  int BOM = 6;
  /** RegularExpression Id. */
  int USP = 7;
  /** RegularExpression Id. */
  int LF = 8;
  /** RegularExpression Id. */
  int CR = 9;
  /** RegularExpression Id. */
  int LS = 10;
  /** RegularExpression Id. */
  int PS = 11;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 14;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 15;
  /** RegularExpression Id. */
  int BREAK = 17;
  /** RegularExpression Id. */
  int DO = 18;
  /** RegularExpression Id. */
  int INSTANCEOF = 19;
  /** RegularExpression Id. */
  int TYPEOF = 20;
  /** RegularExpression Id. */
  int CASE = 21;
  /** RegularExpression Id. */
  int ELSE = 22;
  /** RegularExpression Id. */
  int NEW = 23;
  /** RegularExpression Id. */
  int VAR = 24;
  /** RegularExpression Id. */
  int CATCH = 25;
  /** RegularExpression Id. */
  int FINALLY = 26;
  /** RegularExpression Id. */
  int RETURN = 27;
  /** RegularExpression Id. */
  int VOID = 28;
  /** RegularExpression Id. */
  int CONTINUE = 29;
  /** RegularExpression Id. */
  int FOR = 30;
  /** RegularExpression Id. */
  int SWITCH = 31;
  /** RegularExpression Id. */
  int WHILE = 32;
  /** RegularExpression Id. */
  int DEBUGGER = 33;
  /** RegularExpression Id. */
  int FUNCTION = 34;
  /** RegularExpression Id. */
  int THIS = 35;
  /** RegularExpression Id. */
  int WITH = 36;
  /** RegularExpression Id. */
  int DEFAULT_ = 37;
  /** RegularExpression Id. */
  int IF = 38;
  /** RegularExpression Id. */
  int THROW = 39;
  /** RegularExpression Id. */
  int DELETE = 40;
  /** RegularExpression Id. */
  int IN = 41;
  /** RegularExpression Id. */
  int TRY = 42;
  /** RegularExpression Id. */
  int LBRACE = 43;
  /** RegularExpression Id. */
  int RBRACE = 44;
  /** RegularExpression Id. */
  int LPAREN = 45;
  /** RegularExpression Id. */
  int RPAREN = 46;
  /** RegularExpression Id. */
  int LBRACKET = 47;
  /** RegularExpression Id. */
  int RBRACKET = 48;
  /** RegularExpression Id. */
  int DOT = 49;
  /** RegularExpression Id. */
  int SEMICOLON = 50;
  /** RegularExpression Id. */
  int COMMA = 51;
  /** RegularExpression Id. */
  int LT = 52;
  /** RegularExpression Id. */
  int GT = 53;
  /** RegularExpression Id. */
  int LTE = 54;
  /** RegularExpression Id. */
  int GTE = 55;
  /** RegularExpression Id. */
  int EQ = 56;
  /** RegularExpression Id. */
  int NE = 57;
  /** RegularExpression Id. */
  int EQS = 58;
  /** RegularExpression Id. */
  int NEQS = 59;
  /** RegularExpression Id. */
  int PLUS = 60;
  /** RegularExpression Id. */
  int MINUS = 61;
  /** RegularExpression Id. */
  int MUL = 62;
  /** RegularExpression Id. */
  int MOD = 63;
  /** RegularExpression Id. */
  int INC = 64;
  /** RegularExpression Id. */
  int DEC = 65;
  /** RegularExpression Id. */
  int SHL = 66;
  /** RegularExpression Id. */
  int SHR = 67;
  /** RegularExpression Id. */
  int SHRU = 68;
  /** RegularExpression Id. */
  int AND = 69;
  /** RegularExpression Id. */
  int OR = 70;
  /** RegularExpression Id. */
  int XOR = 71;
  /** RegularExpression Id. */
  int BNOT = 72;
  /** RegularExpression Id. */
  int NOT = 73;
  /** RegularExpression Id. */
  int BAND = 74;
  /** RegularExpression Id. */
  int BOR = 75;
  /** RegularExpression Id. */
  int QUEST = 76;
  /** RegularExpression Id. */
  int COLON = 77;
  /** RegularExpression Id. */
  int ASSIGN = 78;
  /** RegularExpression Id. */
  int AADD = 79;
  /** RegularExpression Id. */
  int ASUB = 80;
  /** RegularExpression Id. */
  int AMUL = 81;
  /** RegularExpression Id. */
  int AMOD = 82;
  /** RegularExpression Id. */
  int ASHL = 83;
  /** RegularExpression Id. */
  int ASHR = 84;
  /** RegularExpression Id. */
  int ASHRU = 85;
  /** RegularExpression Id. */
  int AAND = 86;
  /** RegularExpression Id. */
  int AOR = 87;
  /** RegularExpression Id. */
  int AXOR = 88;
  /** RegularExpression Id. */
  int DIV = 89;
  /** RegularExpression Id. */
  int ADIV = 90;
  /** RegularExpression Id. */
  int NULL_LITERAL = 91;
  /** RegularExpression Id. */
  int BOOLEAN_LITERAL = 92;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 93;
  /** RegularExpression Id. */
  int DECIMAL_INTEGER_LITERAL = 94;
  /** RegularExpression Id. */
  int DECIMAL_DIGITS = 95;
  /** RegularExpression Id. */
  int DECIMAL_DIGIT = 96;
  /** RegularExpression Id. */
  int NON_ZERO_DIGIT = 97;
  /** RegularExpression Id. */
  int EXPONENT_PART = 98;
  /** RegularExpression Id. */
  int EXPONENT_INDICATOR = 99;
  /** RegularExpression Id. */
  int SIGNED_INTEGER = 100;
  /** RegularExpression Id. */
  int HEX_INTEGER_LITERAL = 101;
  /** RegularExpression Id. */
  int STRING_LITERAL = 102;
  /** RegularExpression Id. */
  int DOUBLE_STRING_CHARACTERS = 103;
  /** RegularExpression Id. */
  int SINGLE_STRING_CHARACTERS = 104;
  /** RegularExpression Id. */
  int DOUBLE_STRING_CHARACTER = 105;
  /** RegularExpression Id. */
  int SINGLE_STRING_CHARACTER = 106;
  /** RegularExpression Id. */
  int LINE_CONTINUATION = 107;
  /** RegularExpression Id. */
  int ESCAPE_SEQUENCE = 108;
  /** RegularExpression Id. */
  int CHARACTER_ESCAPE_SEQUENCE = 109;
  /** RegularExpression Id. */
  int SINGLE_ESCAPE_CHARACTER = 110;
  /** RegularExpression Id. */
  int NON_ESCAPE_CHARACTER = 111;
  /** RegularExpression Id. */
  int HEX_ESCAPE_SEQUENCE = 112;
  /** RegularExpression Id. */
  int IDENTIFIER_NAME = 113;
  /** RegularExpression Id. */
  int IDENTIFIER_START = 114;
  /** RegularExpression Id. */
  int IDENTIFIER_PART = 115;
  /** RegularExpression Id. */
  int DOLLAR_SIGN = 116;
  /** RegularExpression Id. */
  int UNDER_SCORE = 117;
  /** RegularExpression Id. */
  int UNICODE_LETTER = 118;
  /** RegularExpression Id. */
  int UNICODE_COMBINING_MARK = 119;
  /** RegularExpression Id. */
  int MC = 120;
  /** RegularExpression Id. */
  int MN = 121;
  /** RegularExpression Id. */
  int UNICODE_DIGIT = 122;
  /** RegularExpression Id. */
  int UNICODE_CONNECTOR_PUNCTUATION = 123;
  /** RegularExpression Id. */
  int UNICODE_ESCAPE_SEQUENCE = 124;
  /** RegularExpression Id. */
  int HEX_DIGIT = 125;
  /** RegularExpression Id. */
  int REGULAR_EXPRESSION_LITERAL = 126;
  /** RegularExpression Id. */
  int BACKSLASH_SEQUENCE = 127;
  /** RegularExpression Id. */
  int JAVA_STATEMENT = 129;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;
  /** Lexical state. */
  int IN_JAVA_STATEMENT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<TAB>",
    "\"\\u000b\"",
    "<FF>",
    "<SP>",
    "\"\\u00a0\"",
    "\"\\ufeff\"",
    "<USP>",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\u2028\"",
    "\"\\u2029\"",
    "\"//\"",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "<token of kind 16>",
    "\"break\"",
    "\"do\"",
    "\"instanceof\"",
    "\"typeof\"",
    "\"case\"",
    "\"else\"",
    "\"new\"",
    "\"var\"",
    "\"catch\"",
    "\"finally\"",
    "\"return\"",
    "\"void\"",
    "\"continue\"",
    "\"for\"",
    "\"switch\"",
    "\"while\"",
    "\"debugger\"",
    "\"function\"",
    "\"this\"",
    "\"with\"",
    "\"default\"",
    "\"if\"",
    "\"throw\"",
    "\"delete\"",
    "\"in\"",
    "\"try\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "\";\"",
    "\",\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"===\"",
    "\"!==\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"%\"",
    "\"++\"",
    "\"--\"",
    "\"<<\"",
    "\">>\"",
    "\">>>\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"!\"",
    "\"~\"",
    "\"&&\"",
    "\"||\"",
    "\"?\"",
    "\":\"",
    "\"=\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"/\"",
    "\"/=\"",
    "\"null\"",
    "<BOOLEAN_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<DECIMAL_INTEGER_LITERAL>",
    "<DECIMAL_DIGITS>",
    "<DECIMAL_DIGIT>",
    "<NON_ZERO_DIGIT>",
    "<EXPONENT_PART>",
    "<EXPONENT_INDICATOR>",
    "<SIGNED_INTEGER>",
    "<HEX_INTEGER_LITERAL>",
    "<STRING_LITERAL>",
    "<DOUBLE_STRING_CHARACTERS>",
    "<SINGLE_STRING_CHARACTERS>",
    "<DOUBLE_STRING_CHARACTER>",
    "<SINGLE_STRING_CHARACTER>",
    "<LINE_CONTINUATION>",
    "<ESCAPE_SEQUENCE>",
    "<CHARACTER_ESCAPE_SEQUENCE>",
    "<SINGLE_ESCAPE_CHARACTER>",
    "<NON_ESCAPE_CHARACTER>",
    "<HEX_ESCAPE_SEQUENCE>",
    "<IDENTIFIER_NAME>",
    "<IDENTIFIER_START>",
    "<IDENTIFIER_PART>",
    "\"$\"",
    "\"_\"",
    "<UNICODE_LETTER>",
    "<UNICODE_COMBINING_MARK>",
    "<MC>",
    "<MN>",
    "<UNICODE_DIGIT>",
    "<UNICODE_CONNECTOR_PUNCTUATION>",
    "<UNICODE_ESCAPE_SEQUENCE>",
    "<HEX_DIGIT>",
    "<REGULAR_EXPRESSION_LITERAL>",
    "<BACKSLASH_SEQUENCE>",
    "\"#\"",
    "<JAVA_STATEMENT>",
    "<token of kind 130>",
  };

}
