/* Generated By:JJTree&JavaCC: Do not edit this line. JSParserTokenManager.java */
package org.descripter.js.parse;

/** Token Manager. */
public class JSParserTokenManager implements JSParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x48800100000L) != 0L)
         {
            jjmatchedKind = 113;
            return 6;
         }
         if ((active0 & 0x373bbee0000L) != 0L || (active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 113;
            return 106;
         }
         if ((active0 & 0x2000000000000L) != 0L)
            return 13;
         if ((active0 & 0x3000L) != 0L || (active1 & 0x6000000L) != 0L)
            return 67;
         if ((active0 & 0x444000000L) != 0L)
         {
            jjmatchedKind = 113;
            return 10;
         }
         return -1;
      case 1:
         if ((active0 & 0x1bbfff20000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 113;
               jjmatchedPos = 1;
            }
            return 106;
         }
         if ((active0 & 0x400000000L) != 0L || (active1 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 113;
               jjmatchedPos = 1;
            }
            return 53;
         }
         if ((active1 & 0x4000000L) != 0L)
            return 107;
         if ((active0 & 0x240000c0000L) != 0L)
            return 106;
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 113;
               jjmatchedPos = 1;
            }
            return 5;
         }
         return -1;
      case 2:
         if ((active0 & 0x1bfbe7a0000L) != 0L || (active1 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 113;
               jjmatchedPos = 2;
            }
            return 106;
         }
         if ((active0 & 0x40041800000L) != 0L)
            return 106;
         return -1;
      case 3:
         if ((active0 & 0x208000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 3;
            return 53;
         }
         if ((active0 & 0x1a5a61a0000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 3;
            return 106;
         }
         if ((active0 & 0x1810600000L) != 0L || (active1 & 0x8000000L) != 0L)
            return 106;
         return -1;
      case 4:
         if ((active0 & 0x106ac180000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 4;
            return 106;
         }
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 4;
            return 53;
         }
         if ((active0 & 0x8102020000L) != 0L)
            return 106;
         return -1;
      case 5:
         if ((active0 & 0x2624080000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 5;
            return 106;
         }
         if ((active0 & 0x10088100000L) != 0L)
            return 106;
         return -1;
      case 6:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 6;
            return 53;
         }
         if ((active0 & 0x600080000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 6;
            return 106;
         }
         if ((active0 & 0x2004000000L) != 0L)
            return 106;
         return -1;
      case 7:
         if ((active0 & 0x20000000L) != 0L)
            return 54;
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 7;
            return 106;
         }
         if ((active0 & 0x600000000L) != 0L)
            return 106;
         return -1;
      case 8:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 8;
            return 106;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 8);
      case 11:
         return jjStopAtPos(0, 2);
      case 13:
         return jjStopAtPos(0, 9);
      case 33:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_0(0xa00000000000000L, 0x0L);
      case 35:
         return jjStopAtPos(0, 128);
      case 37:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 38:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400400L);
      case 40:
         return jjStopAtPos(0, 45);
      case 41:
         return jjStopAtPos(0, 46);
      case 42:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
      case 43:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8001L);
      case 44:
         return jjStopAtPos(0, 51);
      case 45:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10002L);
      case 46:
         return jjStartNfaWithStates_0(0, 49, 13);
      case 47:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_0(0x3000L, 0x4000000L);
      case 58:
         return jjStopAtPos(0, 77);
      case 59:
         return jjStopAtPos(0, 50);
      case 60:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x80004L);
      case 61:
         jjmatchedKind = 78;
         return jjMoveStringLiteralDfa1_0(0x500000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x300018L);
      case 63:
         return jjStopAtPos(0, 76);
      case 91:
         return jjStopAtPos(0, 47);
      case 93:
         return jjStopAtPos(0, 48);
      case 94:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x22200000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x12200040000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x444000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x24000080000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x8000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x48800100000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x11000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1100000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 43);
      case 124:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800800L);
      case 125:
         return jjStopAtPos(0, 44);
      case 126:
         return jjStopAtPos(0, 73);
      case 160:
         return jjStopAtPos(0, 5);
      case 8232:
         return jjStopAtPos(0, 10);
      case 8233:
         return jjStopAtPos(0, 11);
      case 65279:
         return jjStopAtPos(0, 6);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         break;
      case 42:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      case 43:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         break;
      case 45:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         break;
      case 47:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      case 60:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000L);
      case 61:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         else if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         else if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 90, 107);
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000000L, active1, 0L);
      case 62:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x300010L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x3200000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x12208800000L, active1, 0L);
      case 102:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 38, 106);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8900000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1004000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L);
      case 110:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
      case 111:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(1, 18, 106);
         return jjMoveStringLiteralDfa2_0(active0, 0x70000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000020000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0x8000000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L);
      case 124:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(2, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(2, 59);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(2, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(2, 84);
         break;
      case 62:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x990000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x8000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x424000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L);
      case 114:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 106);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 106);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x680000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x100a000000L, active1, 0L);
      case 119:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 106);
         break;
      case 121:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 106);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(3, 85);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2004020000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x402000000L, active1, 0L);
      case 100:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 106);
         break;
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 106);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 106);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000100000L, active1, 0L);
      case 104:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 106);
         break;
      case 108:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 91, 106);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 106);
         break;
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0xa0080000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x208000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 106);
         break;
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 104:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 106);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 107:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 106);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x10400000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 119:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 106);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 106);
         break;
      case 102:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 106);
         break;
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      case 104:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 106);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x2004000000L);
      case 110:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 106);
         return jjMoveStringLiteralDfa6_0(active0, 0x20080000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 106);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 121:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 106);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 54);
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      case 110:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 106);
         break;
      case 114:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 33, 106);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(9, 19, 106);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x1L, 0x0L
};
static final long[] jjbitVec1 = {
   0x4000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec2 = {
   0x800000000fffL, 0x80000000L, 0x0L, 0x0L
};
static final long[] jjbitVec3 = {
   0x1L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec4 = {
   0xfffffffefffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec7 = {
   0xfffffcffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec8 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec9 = {
   0x30000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec10 = {
   0x200002L, 0x0L, 0xf00000000L, 0x1200000000000000L
};
static final long[] jjbitVec11 = {
   0x10000000000000L, 0x4000L, 0x100000000000L, 0x0L
};
static final long[] jjbitVec12 = {
   0x0L, 0x0L, 0x420040000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec13 = {
   0xffffcffffffffL, 0xffffffffffff0000L, 0xf9ff3fffffffffffL, 0x401f00030003L
};
static final long[] jjbitVec14 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec15 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff003L, 0x33fffffffff199fL
};
static final long[] jjbitVec16 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec17 = {
   0x7fffffe00000000L, 0xfffe0000000007ffL, 0xffffffffffffffffL, 0x1c000060002fffffL
};
static final long[] jjbitVec18 = {
   0x1ffffffd0000L, 0x0L, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec19 = {
   0x23ffffffffffffe0L, 0x3ff010000L, 0x3c5fdfffff99fe0L, 0x30003b0000000L
};
static final long[] jjbitVec20 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100010000L
};
static final long[] jjbitVec21 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec22 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec23 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec24 = {
   0xdfffffffffffeL, 0x7fL, 0xe00decaefef02596L, 0x3000005fL
};
static final long[] jjbitVec25 = {
   0x1L, 0x7ffffffffffL, 0xf00L, 0x0L
};
static final long[] jjbitVec26 = {
   0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec27 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec28 = {
   0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL
};
static final long[] jjbitVec29 = {
   0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec30 = {
   0xffffffffffffffffL, 0x7fffffffffffffL, 0xffffffff07fffffeL, 0x7ffffffffffL
};
static final long[] jjbitVec31 = {
   0x0L, 0x0L, 0xfffffffffffffL, 0x0L
};
static final long[] jjbitVec32 = {
   0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec34 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec35 = {
   0x0L, 0x8000000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec36 = {
   0x3fbbd503e2ffc84L, 0xffffffff00000000L, 0xfL, 0x0L
};
static final long[] jjbitVec37 = {
   0x73e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffe601fffffL, 0x77ffffffffffffffL
};
static final long[] jjbitVec38 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0x0L
};
static final long[] jjbitVec39 = {
   0x0L, 0x0L, 0x20000000000000L, 0x0L
};
static final long[] jjbitVec40 = {
   0x0L, 0x0L, 0x2000000000L, 0x0L
};
static final long[] jjbitVec41 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L
};
static final long[] jjbitVec42 = {
   0x0L, 0x0L, 0x800000000L, 0x0L
};
static final long[] jjbitVec43 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec44 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec45 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec46 = {
   0x0L, 0xffd7000000000000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec47 = {
   0x7fffffe00000000L, 0xffffffc007fffffeL, 0x7fffffffffffffffL, 0x1cfcfcfcL
};
static final long[] jjbitVec48 = {
   0xffffffffffffffffL, 0x400000700007fffL, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec49 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff07bL, 0x33fffffffff199fL
};
static final long[] jjbitVec50 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe00ffL, 0x707ffffff0016L
};
static final long[] jjbitVec51 = {
   0x7fffffe00000000L, 0xffff03ff003fffffL, 0xffffffffffffffffL, 0x1fff3dff9fefffffL
};
static final long[] jjbitVec52 = {
   0xffff1fffffff0000L, 0x7ffL, 0x1ffffffffffffL, 0x0L
};
static final long[] jjbitVec53 = {
   0xf3ffffffffffffeeL, 0xffcfff1f3fffL, 0xf3c5fdfffff99feeL, 0x3ffcfb080399fL
};
static final long[] jjbitVec54 = {
   0xd36dfdfffff987ecL, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100013bbfL
};
static final long[] jjbitVec55 = {
   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
};
static final long[] jjbitVec56 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec57 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x2ffbfffffc7fffecL, 0xc0000ff5f847fL
};
static final long[] jjbitVec58 = {
   0x7fffffffffffffeL, 0x3ff7fffL, 0xfbffecaefef02596L, 0x33ff3f5fL
};
static final long[] jjbitVec59 = {
   0xc2a003ff03000001L, 0xfffe07ffffffffffL, 0x1ffffffffeff0fdfL, 0x40L
};
static final long[] jjbitVec60 = {
   0x3c7f6fbffffffffL, 0x3ff03ffL, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec61 = {
   0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec62 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0x3ff000fffffL
};
static final long[] jjbitVec63 = {
   0xffffffff03ff0000L, 0xffffffffffffffL, 0x3ffffffffffL, 0x0L
};
static final long[] jjbitVec64 = {
   0x1fb0e7800000000L, 0x0L, 0xffff000000000000L, 0x301L
};
static final long[] jjbitVec65 = {
   0xe000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec66 = {
   0xc00000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec67 = {
   0x8000000000000000L, 0x8000000000000001L, 0x0L, 0x21fff0000L
};
static final long[] jjbitVec68 = {
   0x73efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec69 = {
   0x9800000004L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec70 = {
   0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec71 = {
   0x18000f00000000L, 0xffd700000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec72 = {
   0x87fffffe03ff0000L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x1cfcfcfcL
};
static final long[] jjbitVec73 = {
   0xffffffffffffffffL, 0x700007fffL, 0x0L, 0x0L
};
static final long[] jjbitVec74 = {
   0x0L, 0x0L, 0x78L, 0x0L
};
static final long[] jjbitVec75 = {
   0x0L, 0x0L, 0xbbfffffbfffe0000L, 0x16L
};
static final long[] jjbitVec76 = {
   0x0L, 0x10000003ff800L, 0x0L, 0x3d9f9fc00000L
};
static final long[] jjbitVec77 = {
   0xffff000000020000L, 0x7ffL, 0x1ffc000000000L, 0x0L
};
static final long[] jjbitVec78 = {
   0xd00000000000000eL, 0xc001e3fffL, 0xf00000000000000eL, 0xc0080399fL
};
static final long[] jjbitVec79 = {
   0xd00000000000000cL, 0x3000000003987L, 0xd00000000000000eL, 0x3bbfL
};
static final long[] jjbitVec80 = {
   0xd00000000000000eL, 0xc0398fL, 0xc00000000000000cL, 0x803dc7L
};
static final long[] jjbitVec81 = {
   0xc00000000000000eL, 0x603ddfL, 0xc00000000000000cL, 0x603ddfL
};
static final long[] jjbitVec82 = {
   0xc00000000000000cL, 0x803dcfL, 0xcL, 0xc0000ff5f8400L
};
static final long[] jjbitVec83 = {
   0x7f2000000000000L, 0x7f80L, 0x1bf2000000000000L, 0x3f00L
};
static final long[] jjbitVec84 = {
   0xc2a0000003000000L, 0xfffe000000000000L, 0x1ffffffffeff00dfL, 0x40L
};
static final long[] jjbitVec85 = {
   0x3c7f00000000000L, 0x3c00000L, 0x0L, 0x0L
};
static final long[] jjbitVec86 = {
   0x0L, 0x0L, 0xfff0000000000000L, 0xfffffL
};
static final long[] jjbitVec87 = {
   0x0L, 0x0L, 0x20000000000L, 0x0L
};
static final long[] jjbitVec88 = {
   0x0L, 0x0L, 0x0L, 0x21fff0000L
};
static final long[] jjbitVec89 = {
   0xfc0000000000L, 0x0L, 0x6000000L, 0x0L
};
static final long[] jjbitVec90 = {
   0x40000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec91 = {
   0xf00000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec92 = {
   0xc000000000000008L, 0x1e01L, 0xc00000000000000cL, 0x801981L
};
static final long[] jjbitVec93 = {
   0xc000000000000008L, 0x1L, 0xc000000000000008L, 0x1a01L
};
static final long[] jjbitVec94 = {
   0x400000000000000cL, 0x801981L, 0xc000000000000000L, 0x801dc6L
};
static final long[] jjbitVec95 = {
   0xeL, 0x1eL, 0x400000000000000cL, 0x600d9fL
};
static final long[] jjbitVec96 = {
   0xc00000000000000cL, 0x801dc1L, 0xcL, 0xc0000ff038000L
};
static final long[] jjbitVec97 = {
   0xc000000000000000L, 0x8000000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec98 = {
   0x102100000000000L, 0xc00000L, 0x0L, 0x0L
};
static final long[] jjbitVec99 = {
   0x0L, 0x0L, 0xc040000000000000L, 0x1bfL
};
static final long[] jjbitVec100 = {
   0xd000000000000004L, 0x3000000003987L, 0xd00000000000000eL, 0x3bbfL
};
static final long[] jjbitVec101 = {
   0x1600L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec102 = {
   0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L
};
static final long[] jjbitVec103 = {
   0x1000000L, 0x0L, 0x0L, 0x8000000000000000L
};
static final long[] jjbitVec104 = {
   0x3ff0000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec105 = {
   0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L
};
static final long[] jjbitVec106 = {
   0x0L, 0xffc000000000L, 0x0L, 0xff8000000000L
};
static final long[] jjbitVec107 = {
   0x0L, 0xffc000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec108 = {
   0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec109 = {
   0x3ff00000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec110 = {
   0x0L, 0x3ffL, 0x0L, 0x0L
};
static final long[] jjbitVec111 = {
   0x0L, 0x3fe0000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec112 = {
   0x0L, 0x0L, 0x0L, 0x3ff00000000L
};
static final long[] jjbitVec113 = {
   0x8000000000000000L, 0x1L, 0x0L, 0x0L
};
static final long[] jjbitVec114 = {
   0x0L, 0x0L, 0x0L, 0x800000000000000L
};
static final long[] jjbitVec115 = {
   0x18000000000000L, 0xe000L, 0x0L, 0x0L
};
static final long[] jjbitVec116 = {
   0x8000000000000000L, 0x2000000000L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 106;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAdd(97);
                  }
                  else if (curChar == 47)
                     jjAddStates(0, 1);
                  else if (curChar == 36)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAddTwoStates(51, 52);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(2, 4);
                  else if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  else if (curChar == 46)
                     jjCheckNAdd(13);
                  else if (curChar == 32)
                  {
                     if (kind > 4)
                        kind = 4;
                  }
                  else if (curChar == 12)
                  {
                     if (kind > 3)
                        kind = 3;
                  }
                  else if (curChar == 9)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 125)
                        kind = 125;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 122)
                        kind = 122;
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAddStates(8, 12);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 93)
                        kind = 93;
                     jjCheckNAddStates(13, 15);
                  }
                  break;
               case 6:
               case 51:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 106:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 67:
                  if ((0xffff7bffffffdbffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 107:
                  if ((0xffff7fffffffdbffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  else if (curChar == 47)
                  {
                     if (kind > 126)
                        kind = 126;
                     jjCheckNAddTwoStates(72, 73);
                  }
                  break;
               case 54:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAddTwoStates(51, 52);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 10:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 53:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAddTwoStates(51, 52);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 5:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 1:
                  if (curChar == 12 && kind > 3)
                     kind = 3;
                  break;
               case 2:
                  if (curChar == 32 && kind > 4)
                     kind = 4;
                  break;
               case 12:
                  if (curChar == 46)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 15:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjCheckNAdd(16);
                  break;
               case 17:
                  if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  break;
               case 18:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 19:
                  if (curChar == 34 && kind > 102)
                     kind = 102;
                  break;
               case 21:
                  jjCheckNAddStates(5, 7);
                  break;
               case 23:
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 29:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 30:
                  if (curChar == 10)
                     jjCheckNAddStates(5, 7);
                  break;
               case 31:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 39)
                     jjCheckNAddStates(2, 4);
                  break;
               case 33:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 34:
                  if (curChar == 39 && kind > 102)
                     kind = 102;
                  break;
               case 36:
                  jjCheckNAddStates(2, 4);
                  break;
               case 38:
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 44:
                  if ((0x2400L & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 45:
                  if (curChar == 10)
                     jjCheckNAddStates(2, 4);
                  break;
               case 46:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L && kind > 112)
                     kind = 112;
                  break;
               case 50:
                  if (curChar != 36)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 55:
               case 59:
               case 101:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L && kind > 122)
                     kind = 122;
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L && kind > 125)
                     kind = 125;
                  break;
               case 66:
                  if (curChar == 47)
                     jjAddStates(0, 1);
                  break;
               case 68:
                  if ((0xffff7fffffffdbffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 70:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 71:
                  if (curChar != 47)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAddTwoStates(72, 73);
                  break;
               case 72:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAddTwoStates(72, 73);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(77);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAddTwoStates(72, 73);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar != 48)
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjCheckNAddStates(13, 15);
                  break;
               case 83:
                  if (curChar != 46)
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjCheckNAddTwoStates(84, 85);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjCheckNAddTwoStates(84, 85);
                  break;
               case 86:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(87);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjCheckNAdd(87);
                  break;
               case 89:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(90);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjCheckNAdd(90);
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 93:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjCheckNAddStates(8, 12);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(94, 83);
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjCheckNAddTwoStates(95, 88);
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAdd(96);
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(97);
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) != 0L && kind > 124)
                     kind = 124;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAddTwoStates(51, 52);
                  }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 125)
                        kind = 125;
                  }
                  else if (curChar == 117)
                     jjAddStates(19, 20);
                  else if (curChar == 95)
                  {
                     if (kind > 123)
                        kind = 123;
                  }
                  else if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 48;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 6;
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAddTwoStates(51, 52);
                  }
                  if (curChar == 117)
                     jjAddStates(21, 22);
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 106:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAddTwoStates(51, 52);
                  }
                  if (curChar == 117)
                     jjAddStates(21, 22);
                  break;
               case 67:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  else if (curChar == 92)
                     jjCheckNAdd(70);
                  break;
               case 107:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  else if (curChar == 92)
                     jjCheckNAdd(70);
                  break;
               case 54:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAddTwoStates(51, 52);
                  }
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  else if (curChar == 117)
                     jjAddStates(21, 22);
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAddTwoStates(51, 52);
                  }
                  if (curChar == 117)
                     jjAddStates(21, 22);
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAddTwoStates(51, 52);
                  }
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  else if (curChar == 117)
                     jjAddStates(21, 22);
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAddTwoStates(51, 52);
                  }
                  if (curChar == 117)
                     jjAddStates(21, 22);
                  if (curChar == 117)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if (curChar == 101 && kind > 92)
                     kind = 92;
                  break;
               case 7:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 115)
                     jjCheckNAdd(4);
                  break;
               case 9:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 11:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 14:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(23, 24);
                  break;
               case 18:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 20:
                  if (curChar == 92)
                     jjAddStates(25, 29);
                  break;
               case 21:
                  jjCheckNAddStates(5, 7);
                  break;
               case 22:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
               case 28:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 25:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 33:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 35:
                  if (curChar == 92)
                     jjAddStates(30, 34);
                  break;
               case 36:
                  jjCheckNAddStates(2, 4);
                  break;
               case 37:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
               case 43:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 40:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 47:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 49:
                  if ((0x7e0000007eL & l) != 0L && kind > 112)
                     kind = 112;
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if (curChar == 117)
                     jjAddStates(21, 22);
                  break;
               case 55:
               case 59:
               case 101:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 57:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 58:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 64:
                  if (curChar == 95 && kind > 123)
                     kind = 123;
                  break;
               case 65:
                  if ((0x7e0000007eL & l) != 0L && kind > 125)
                     kind = 125;
                  break;
               case 68:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 69:
                  if (curChar == 92)
                     jjCheckNAdd(70);
                  break;
               case 70:
                  jjCheckNAddStates(16, 18);
                  break;
               case 72:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAddTwoStates(72, 73);
                  break;
               case 73:
                  if (curChar == 117)
                     jjAddStates(35, 36);
                  break;
               case 74:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
               case 80:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(77);
                  break;
               case 77:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjCheckNAddTwoStates(72, 73);
                  break;
               case 78:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 81:
                  if (curChar == 92)
                     jjCheckNAdd(70);
                  break;
               case 85:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(37, 38);
                  break;
               case 88:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(39, 40);
                  break;
               case 91:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(92);
                  break;
               case 92:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(92);
                  break;
               case 98:
                  if (curChar == 117)
                     jjAddStates(19, 20);
                  break;
               case 99:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 100:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 102:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 103:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 104:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 105:
                  if ((0x7e0000007eL & l) != 0L && kind > 124)
                     kind = 124;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 113)
                        kind = 113;
                     jjCheckNAddTwoStates(51, 52);
                  }
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 119)
                        kind = 119;
                  }
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 120)
                        kind = 120;
                  }
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 121)
                        kind = 121;
                  }
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 122)
                        kind = 122;
                  }
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 123)
                        kind = 123;
                  }
                  break;
               case 6:
               case 51:
                  if (!jjCanMove_5(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 106:
                  if (!jjCanMove_5(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 67:
               case 70:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(16, 18);
                  break;
               case 107:
               case 68:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(16, 18);
                  break;
               case 54:
                  if (!jjCanMove_5(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 10:
                  if (!jjCanMove_5(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 53:
                  if (!jjCanMove_5(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 5:
                  if (!jjCanMove_5(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 3:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 7)
                     kind = 7;
                  break;
               case 18:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(5, 7);
                  break;
               case 21:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(5, 7);
                  break;
               case 29:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(5, 7);
                  break;
               case 33:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(2, 4);
                  break;
               case 36:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(2, 4);
                  break;
               case 44:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(2, 4);
                  break;
               case 50:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 60:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2) && kind > 119)
                     kind = 119;
                  break;
               case 61:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2) && kind > 120)
                     kind = 120;
                  break;
               case 62:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2) && kind > 121)
                     kind = 121;
                  break;
               case 63:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2) && kind > 122)
                     kind = 122;
                  break;
               case 64:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2) && kind > 123)
                     kind = 123;
                  break;
               case 72:
                  if (!jjCanMove_5(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 126)
                     kind = 126;
                  jjAddStates(41, 42);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 106 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x8000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(4, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0xffffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                     jjCheckNAddStates(43, 45);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  kind = 14;
                  jjCheckNAddStates(43, 45);
                  break;
               case 1:
                  if ((0x2400L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 2:
                  if (curChar == 10 && kind > 14)
                     kind = 14;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 0:
                  kind = 14;
                  jjCheckNAddStates(43, 45);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 14)
                        kind = 14;
                     jjCheckNAddStates(43, 45);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  break;
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAddStates(43, 45);
                  break;
               case 1:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 14)
                     kind = 14;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(4, 0);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0xf7fffff7ffffdbffL & l) != 0L)
                  {
                     if (kind > 129)
                        kind = 129;
                     jjCheckNAddStates(43, 45);
                  }
                  else if ((0x800000000002400L & l) != 0L)
                  {
                     if (kind > 129)
                        kind = 129;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0xf7fffff7ffffdbffL & l) == 0L)
                     break;
                  kind = 129;
                  jjCheckNAddStates(43, 45);
                  break;
               case 1:
                  if ((0x800000000002400L & l) != 0L && kind > 129)
                     kind = 129;
                  break;
               case 2:
                  if (curChar == 10 && kind > 129)
                     kind = 129;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 0:
                  kind = 129;
                  jjCheckNAddStates(43, 45);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 129)
                        kind = 129;
                     jjCheckNAddStates(43, 45);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 129)
                        kind = 129;
                  }
                  break;
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 129)
                     kind = 129;
                  jjCheckNAddStates(43, 45);
                  break;
               case 1:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 129)
                     kind = 129;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   67, 81, 33, 34, 35, 18, 19, 20, 94, 83, 95, 88, 96, 83, 88, 91, 
   68, 69, 71, 99, 102, 53, 57, 15, 16, 21, 22, 25, 29, 31, 36, 37, 
   40, 44, 46, 74, 78, 86, 87, 89, 90, 72, 73, 0, 1, 3, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 22:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec1[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec3[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec7[i2] & l2) != 0L);
      default :
         if ((jjbitVec4[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec6[i2] & l2) != 0L);
      default :
         if ((jjbitVec8[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec47[i2] & l2) != 0L);
      default :
         if ((jjbitVec11[i1] & l1) != 0L)
            if ((jjbitVec3[i2] & l2) == 0L)
               return false;
            else
            return true;
         if ((jjbitVec10[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec61[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec62[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec63[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec64[i2] & l2) != 0L);
      case 26:
         return ((jjbitVec65[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec66[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec67[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec68[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec69[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec70[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec71[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec72[i2] & l2) != 0L);
      default :
         if ((jjbitVec11[i1] & l1) != 0L)
            if ((jjbitVec3[i2] & l2) == 0L)
               return false;
            else
            return true;
         if ((jjbitVec10[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_6(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 3:
         return ((jjbitVec73[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec74[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec75[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec76[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec77[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec78[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec79[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec80[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec81[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec82[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec83[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec84[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec85[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec86[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec87[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec64[i2] & l2) != 0L);
      case 26:
         return ((jjbitVec65[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec66[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec88[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec89[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec69[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec90[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec91[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_7(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 9:
         return ((jjbitVec92[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec93[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec94[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec95[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec96[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec97[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec98[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec99[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec64[i2] & l2) != 0L);
      case 26:
         return ((jjbitVec65[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec66[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec69[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_8(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 3:
         return ((jjbitVec73[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec74[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec75[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec76[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec77[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec78[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec100[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec80[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec81[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec82[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec83[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec84[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec85[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec86[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec87[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec88[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec89[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec90[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec91[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_9(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec105[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec106[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec107[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec108[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec109[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec110[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec111[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec112[i2] & l2) != 0L);
      default :
         if ((jjbitVec103[i1] & l1) != 0L)
            if ((jjbitVec104[i2] & l2) == 0L)
               return false;
            else
            return true;
         if ((jjbitVec101[i1] & l1) != 0L)
            if ((jjbitVec102[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}
private static final boolean jjCanMove_10(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 32:
         return ((jjbitVec113[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec114[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec115[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec116[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_SINGLE_LINE_COMMENT",
   "IN_MULTI_LINE_COMMENT",
   "IN_JAVA_STATEMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, 3, 0, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffe0001L, 0x7f030061ffffffffL, 0x2L, 
};
static final long[] jjtoSkip = {
   0xcffeL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xcffeL, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x13000L, 0x80000000000000L, 0x5L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[106];
private final int[] jjstateSet = new int[212];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public JSParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public JSParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 106; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getBeginLine();
      beginColumn = endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 14;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos < 0 || (jjmatchedPos == 0 && jjmatchedKind > 16))
         {
            jjmatchedKind = 16;
            jjmatchedPos = 0;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 16)
         {
            jjmatchedKind = 16;
         }
         break;
       case 3:
         jjmatchedKind = 129;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos < 0 || (jjmatchedPos == 0 && jjmatchedKind > 130))
         {
            jjmatchedKind = 130;
            jjmatchedPos = 0;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
