/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. JavaScript.jj */
/*@egen*/
/*
 *  Descripter 1.0 - Java Script Engines
 *  Copyright (C) 2010-2015  Jianjun Liu (J.J.Liu)
 *  
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *  
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

options {
	                        
	FORCE_LA_CHECK = false;
	JDK_VERSION = "1.6";
	JAVA_UNICODE_ESCAPE = true;
	UNICODE_INPUT = true;
	             
	                            
	                         
	                                         
	                     
	                       
	                        
	STATIC = false;
	               
	                             
	                               
	                       
}

PARSER_BEGIN(JSParser)

package org.descripter.js.parse;

public class JSParser/*@bgen(jjtree)*/implements JSParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTJSParserState jjtree = new JJTJSParserState();

/*@egen*/
	void jjtreeOpenNodeScope(Node n) {
		((AbstractNode)n).firstToken = getToken(1);
	}

	void jjtreeCloseNodeScope(Node n) {
		((AbstractNode)n).lastToken = getToken(0);
	}
}
PARSER_END(JSParser)

/*************************************
 * ECMAScript Language Specification *
 *************************************/

/* ECMA-262 5.1 Edition / June 2011 - Section 7.2 : White Space */

SPECIAL_TOKEN :
{
	<TAB: "	" | "\t" > /* TAB */
|	<VT: "\u000b" >         /* Vertical Tab */
|	<FF: "" | "\f">   /* Form Feed */
|	<SP: " " | " " >   /* Space */
|	<NBSP: "\u00a0" >       /* No-break space */
|	<BOM: "\ufeff" >        /* Byte Order Mark */
|	<USP:                   /* Other Unicode space seperator */
		["\u1680"] 
	|	["\u180e"] 
	|	["\u2000"] 
	|	["\u2001"] 
	|	["\u2002"] 
	|	["\u2003"] 
	|	["\u2004"] 
	|	["\u2005"] 
	|	["\u2006"] 
	|	["\u2007"]
	|	["\u2008"] 
	|	["\u2009"] 
	|	["\u200a"] 
	|	["\u200b"]
	|	["\u202f"]
	|	["\u205f"]
	|	["\u3000"]
	>
}

/* ECMA-262 5.1 Edition / June 2011 - Section 7.3 : Line Terminators */

SPECIAL_TOKEN :
{
	< LF: "\n" >     /* Line Feed */
|	< CR: "\r" >     /* Carriage Return */
|	< LS: "\u2028" > /* Line separator */
|	< PS: "\u2029" > /* Paragraph separator */
}

/* ECMA-262 5.1 Edition / June 2011 - Section 7.4 : Comments */

MORE :
{
	"//" : IN_SINGLE_LINE_COMMENT
|	"/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT> SPECIAL_TOKEN :
{
	<SINGLE_LINE_COMMENT:
		(~["\n","\r","\u2028","\u2029"])* ("\n" | "\r" | "\r\n" | "\u2028" | "\u2029")?
	> : DEFAULT
}

<IN_MULTI_LINE_COMMENT> SPECIAL_TOKEN :
{
	<MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_MULTI_LINE_COMMENT> MORE :
{
	< ~[] >
}

/* ECMA-262 5.1 Edition / June 2011 - Section 7.6.1.1: Keywords */

TOKEN :
{
  < BREAK: "break" >       | < DO: "do" >             | < INSTANCEOF: "instanceof" > | < TYPEOF: "typeof" >
| < CASE: "case" >         | < ELSE: "else" >         | < NEW: "new" >               | < VAR: "var" >
| < CATCH: "catch" >       | < FINALLY: "finally" >   | < RETURN: "return" >         | < VOID: "void" >
| < CONTINUE: "continue" > | < FOR: "for" >           | < SWITCH: "switch" >         | < WHILE: "while" >
| < DEBUGGER: "debugger" > | < FUNCTION: "function" > | < THIS: "this" >             | < WITH: "with" >
| < DEFAULT_: "default" >  | < IF: "if" >             | < THROW: "throw" >
| < DELETE: "delete" >     | < IN: "in" >             | < TRY: "try" >
}

/* ECMA-262 5.1 Edition / June 2011 - Section 7.7: Punctuators */

TOKEN :
{
  < LBRACE: "{" > | < RBRACE: "}" >    | < LPAREN: "(" > | < RPAREN: ")" > | < LBRACKET: "[" > | < RBRACKET: "]" >
| < DOT: "." >    | < SEMICOLON: ";" > | < COMMA: "," >  | < LT: "<" >     | < GT: ">" >       | < LTE: "<=" >
| < GTE: ">=" >   | < EQ: "==" >       | < NE: "!=" >    | < EQS: "===" >  | < NEQS: "!==" >
| < PLUS: "+" >   | < MINUS: "-" >     | < MUL: "*" >    | < MOD: "%" >    | < INC: "++" >     | < DEC: "--" >
| < SHL: "<<" >   | < SHR: ">>" >      | < SHRU: ">>>" > | < AND: "&" >    | < OR: "|" >       | < XOR: "^" >
| < BNOT: "!" >   | < NOT: "~" >       | < BAND: "&&" >  | < BOR: "||" >   | < QUEST: "?" >    | < COLON: ":" >
| < ASSIGN: "=" > | < AADD: "+=" >     | < ASUB: "-=" >  | < AMUL: "*=" >  | < AMOD: "%=" >    | < ASHL: "<<=" >
| < ASHR: ">>=" > | < ASHRU: ">>>=" >  | < AAND: "&=" >  | < AOR: "|=" >   | < AXOR: "^=" >
| < DIV: "/" >    | < ADIV: "/=" >
}

/* ECMA-262 5.1 Edition / June 2011 - Section 7.8: Literals */

void Literal()          :
{/*@bgen(jjtree) Literal */
        ECMALiteral jjtn000 = new ECMALiteral(this, JJTLITERAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Literal */
try {
/*@egen*/
(
  	t =	<DECIMAL_LITERAL>
|	t =	<HEX_INTEGER_LITERAL>
|	t =	<STRING_LITERAL>
|	t =	<BOOLEAN_LITERAL>
|	t =	<NULL_LITERAL>
|	t =	<REGULAR_EXPRESSION_LITERAL>
)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
        }
/*@egen*/	{
		jjtn000.jjtSetValue(t.image);
	}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtreeCloseNodeScope(jjtn000);
  }
}
/*@egen*/
}

/* ECMA-262 5.1 Edition / June 2011 - Section 7.8.1: NULL Literals */

TOKEN:
{ 
	< NULL_LITERAL: "null" >
}

/* ECMA-262 5.1 Edition / June 2011 - Section 7.8.2: Boolean Literals */

TOKEN:
{ 
	< BOOLEAN_LITERAL: "true" | "false" >
}

/* ECMA-262 5.1 Edition / June 2011 - Section 7.8.3: Numeric Literals */

TOKEN:
{ 
	< DECIMAL_LITERAL :
		< DECIMAL_INTEGER_LITERAL > "." (< DECIMAL_DIGITS >)? (< EXPONENT_PART >)?
	|	"." < DECIMAL_DIGITS > (< EXPONENT_PART >)?
	|		< DECIMAL_INTEGER_LITERAL > (< EXPONENT_PART >)? 
	> 
|	< DECIMAL_INTEGER_LITERAL: "0" | < NON_ZERO_DIGIT > (< DECIMAL_DIGITS >)?>
|   < DECIMAL_DIGITS: (< DECIMAL_DIGIT >)+ >
| 	< DECIMAL_DIGIT: ["0"-"9"] >
|	< #NON_ZERO_DIGIT: ["1"-"9"] >
|	< #EXPONENT_PART: < EXPONENT_INDICATOR > < SIGNED_INTEGER > >
|	< #EXPONENT_INDICATOR: ["e", "E"] >
|	< #SIGNED_INTEGER: (["+", "-"])? < DECIMAL_DIGITS > >
|	< HEX_INTEGER_LITERAL: "0" ["x","X"] (< HEX_DIGIT >)+ >
}

/* ECMA-262 5.1 Edition / June 2011 - Section 7.8.4: String Literals */

TOKEN:
{
	< STRING_LITERAL:
		"\"" (< DOUBLE_STRING_CHARACTERS >)? "\""
	|	"'"  (< SINGLE_STRING_CHARACTERS >)? "'"
	>
|	< #DOUBLE_STRING_CHARACTERS: (<DOUBLE_STRING_CHARACTER>)* >
|	< #SINGLE_STRING_CHARACTERS: (<SINGLE_STRING_CHARACTER>)* >
|	< #DOUBLE_STRING_CHARACTER:
		(~["\"","\\","\n","\r","\u2028","\u2029"])*
	|	"\\" < ESCAPE_SEQUENCE >
	|	< LINE_CONTINUATION >
	>
|	< #SINGLE_STRING_CHARACTER:
		(~["'","\\","\n","\r","\u2028","\u2029"])
	|	"\\" <ESCAPE_SEQUENCE>
	|	< LINE_CONTINUATION >
	> 
|	< #LINE_CONTINUATION: "\\" ("\n" | "\r" | "\r\n" | "\u2028" | "\u2029") >
|	< #ESCAPE_SEQUENCE:
		<CHARACTER_ESCAPE_SEQUENCE>
	|	"0" 
	|	<HEX_ESCAPE_SEQUENCE>
	|	<UNICODE_ESCAPE_SEQUENCE>
	>
|	< #CHARACTER_ESCAPE_SEQUENCE:
		<SINGLE_ESCAPE_CHARACTER> | <NON_ESCAPE_CHARACTER>
	>
|	< #SINGLE_ESCAPE_CHARACTER: ["'", "\"", "\\", "b", "f", "n", "r", "t", "v"] >
|	< #NON_ESCAPE_CHARACTER: 
		~["'", "\"", "\\", "b", "f", "n", "r", "t", "v"]
	| 	~["\n", "\r", "\u2028", "\u2029"]
	|	~["0"-"9"]
	|	~["x", "u"]
	>
|	< HEX_ESCAPE_SEQUENCE: "x" < HEX_DIGIT > < HEX_DIGIT > >
}

/* ECMA-262 5.1 Edition / June 2011 - Section 11.1: Primary Expressions */

void PrimaryExpression()       :
{}
{
	LOOKAHEAD("this")/*@bgen(jjtree) ThisReference */
                          {
                            ECMAThisReference jjtn001 = new ECMAThisReference(this, JJTTHISREFERENCE);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                            jjtreeOpenNodeScope(jjtn001);
                          }
                          try {
/*@egen*/ "this"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                              jjtreeCloseNodeScope(jjtn001);
                            }
                          }
/*@egen*/               
|	LOOKAHEAD("{") ObjectLiteral()
|	LOOKAHEAD("(")/*@bgen(jjtree) Group */
                       {
                         ECMAGroup jjtn002 = new ECMAGroup(this, JJTGROUP);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                         jjtreeOpenNodeScope(jjtn002);
                       }
                       try {
/*@egen*/ ( "(" Expression() ")" )/*@bgen(jjtree)*/
                       } catch (Throwable jjte002) {
                         if (jjtc002) {
                           jjtree.clearNodeScope(jjtn002);
                           jjtc002 = false;
                         } else {
                           jjtree.popNode();
                         }
                         if (jjte002 instanceof RuntimeException) {
                           throw (RuntimeException)jjte002;
                         }
                         if (jjte002 instanceof ParseException) {
                           throw (ParseException)jjte002;
                         }
                         throw (Error)jjte002;
                       } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002, true);
                           jjtreeCloseNodeScope(jjtn002);
                         }
                       }
/*@egen*/       
|	LOOKAHEAD(Identifier()) Identifier()
|	LOOKAHEAD("[") ArrayLiteral()
|	LOOKAHEAD(2) Literal() 
}

/* ECMA-262 5.1 Edition / June 2011 - Section 11.1.4: Array Initialiser */

void ArrayLiteral()               : 
{/*@bgen(jjtree) ArrayLiteral */
  ECMAArrayLiteral jjtn000 = new ECMAArrayLiteral(this, JJTARRAYLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArrayLiteral */
        try {
/*@egen*/
	"[" (
		LOOKAHEAD(2) ( Elision() )? "]" 
	|	LOOKAHEAD(ElementList() Elision()) ElementList() Elision() "]" 
	|	( ElementList() )? "]" 
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}		 

void ElementList()       :
{}
{
	( Elision() )? AssignmentExpression() (
		LOOKAHEAD(Elision()	AssignmentExpression()) Elision()  AssignmentExpression()
	)*
}

void Elision()       :
{}
{
	(",")+
}

/* ECMA-262 5.1 Edition / June 2011 - Section 11.1.5: Object Initialiser */

void ObjectLiteral()                :
{/*@bgen(jjtree) ObjectLiteral */
  ECMAObjectLiteral jjtn000 = new ECMAObjectLiteral(this, JJTOBJECTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ObjectLiteral */
        try {
/*@egen*/
	"{" ( PropertyNameAndValueList() )? "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void PropertyNameAndValueList()       :
{}
{
	PropertyAssignment() ( LOOKAHEAD( "," PropertyAssignment()) "," PropertyAssignment() | "," )* 
}

void PropertyAssignment()                     :
{/*@bgen(jjtree) PropertyAssignment */
  ECMAPropertyAssignment jjtn000 = new ECMAPropertyAssignment(this, JJTPROPERTYASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PropertyAssignment */
        try {
/*@egen*/
	PropertyName() ":" AssignmentExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/ 
}

void PropertyName()       :
{}
{
	Identifier() 
|/*@bgen(jjtree) Literal */
        {
          ECMALiteral jjtn001 = new ECMALiteral(this, JJTLITERAL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
        }
        try {
/*@egen*/	<STRING_LITERAL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtreeCloseNodeScope(jjtn001);
          }
        }
/*@egen*/         
|/*@bgen(jjtree) Literal */
        {
          ECMALiteral jjtn002 = new ECMALiteral(this, JJTLITERAL);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtreeOpenNodeScope(jjtn002);
        }
        try {
/*@egen*/	<DECIMAL_LITERAL>/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtreeCloseNodeScope(jjtn002);
          }
        }
/*@egen*/         
}

/* ECMA-262 5.1 Edition / June 2011 - Section 11.2: Left-Hand-Side Expressions */

void MemberExpression()       :
{}
{/*@bgen(jjtree) #Access(> 1) */
        {
          ECMAAccess jjtn002 = new ECMAAccess(this, JJTACCESS);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtreeOpenNodeScope(jjtn002);
        }
        try {
/*@egen*/
	(	(	PrimaryExpression()  
		|	FunctionExpression()
		|/*@bgen(jjtree) NewOperation */
                        {
                          ECMANewOperation jjtn001 = new ECMANewOperation(this, JJTNEWOPERATION);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                          jjtreeOpenNodeScope(jjtn001);
                        }
                        try {
/*@egen*/	( "new" MemberExpression() Arguments() )/*@bgen(jjtree)*/
                        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            throw (RuntimeException)jjte001;
                          }
                          if (jjte001 instanceof ParseException) {
                            throw (ParseException)jjte001;
                          }
                          throw (Error)jjte001;
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtreeCloseNodeScope(jjtn001);
                          }
                        }
/*@egen*/              
		) (LOOKAHEAD(1) PropertyAccessor())*
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn002);
          }
        }
/*@egen*/            
}

void NewExpression()       :
{}
{
	LOOKAHEAD(MemberExpression()) MemberExpression()
|/*@bgen(jjtree) Allocation */
        {
          ECMAAllocation jjtn001 = new ECMAAllocation(this, JJTALLOCATION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
        }
        try {
/*@egen*/	( "new" NewExpression() )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtreeCloseNodeScope(jjtn001);
          }
        }
/*@egen*/            
}

void PropertyAccessor()       :
{}
{/*@bgen(jjtree) ArrayAccessor */
        {
          ECMAArrayAccessor jjtn001 = new ECMAArrayAccessor(this, JJTARRAYACCESSOR);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
        }
        try {
/*@egen*/
	( "[" Expression() "]" )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtreeCloseNodeScope(jjtn001);
          }
        }
/*@egen*/               
|/*@bgen(jjtree) MemberAccessor */
        {
          ECMAMemberAccessor jjtn002 = new ECMAMemberAccessor(this, JJTMEMBERACCESSOR);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtreeOpenNodeScope(jjtn002);
        }
        try {
/*@egen*/	( "." Identifier() )/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtreeCloseNodeScope(jjtn002);
          }
        }
/*@egen*/                
}

void CallExpression()             : 
{/*@bgen(jjtree) #Access(> 1) */
  ECMAAccess jjtn000 = new ECMAAccess(this, JJTACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Access(> 1) */
        try {
/*@egen*/
	MemberExpression() Arguments() ( LOOKAHEAD(2) ( Arguments() | PropertyAccessor() ) )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void Arguments()            :
{/*@bgen(jjtree) Arguments */
  ECMAArguments jjtn000 = new ECMAArguments(this, JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Arguments */
        try {
/*@egen*/
	"(" (ArgumentList())? ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void ArgumentList()       :
{}
{
	AssignmentExpression() ("," AssignmentExpression())*
}

void LeftHandSideExpression()       : 
{}
{
	LOOKAHEAD(MemberExpression() "(") CallExpression() | NewExpression() 
}

/* ECMA-262 5.1 Edition / June 2011 - Section 11.3 Postfix Expressions */

void PostfixExpression()                        :
{/*@bgen(jjtree) #PostfixExpression(> 1) */
  ECMAPostfixExpression jjtn000 = new ECMAPostfixExpression(this, JJTPOSTFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #PostfixExpression(> 1) */
        try {
/*@egen*/
	LeftHandSideExpression() [ LOOKAHEAD(1)/*@bgen(jjtree) Operator */
                                                {
                                                  ECMAOperator jjtn001 = new ECMAOperator(this, JJTOPERATOR);
                                                  boolean jjtc001 = true;
                                                  jjtree.openNodeScope(jjtn001);
                                                  jjtreeOpenNodeScope(jjtn001);
                                                }
                                                try {
/*@egen*/ ( "++" | "--" )/*@bgen(jjtree)*/
                                                } finally {
                                                  if (jjtc001) {
                                                    jjtree.closeNodeScope(jjtn001, true);
                                                    jjtreeCloseNodeScope(jjtn001);
                                                  }
                                                }
/*@egen*/           ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* ECMA-262 5.1 Edition / June 2011 - Section 11.4 Unary Operators */

void UnaryExpression()                      :
{/*@bgen(jjtree) #UnaryExpression(> 1) */
  ECMAUnaryExpression jjtn000 = new ECMAUnaryExpression(this, JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #UnaryExpression(> 1) */
        try {
/*@egen*/ 
	PostfixExpression()
|	(/*@bgen(jjtree) Operator */
                {
                  ECMAOperator jjtn001 = new ECMAOperator(this, JJTOPERATOR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtreeOpenNodeScope(jjtn001);
                }
                try {
/*@egen*/
		(
			"delete"
		|	"void"
		|	"typeof"
		|	"++"
		|	"--"
		|	"+"
		|	"-"
		|	"~"
		|	"!"
		)/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtreeCloseNodeScope(jjtn001);
                  }
                }
/*@egen*/           UnaryExpression()
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* ECMA-262 5.1 Edition / June 2011 - Section 11.5: Multiplicative Operators */

void MultiplicativeExpression()                      :
{/*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryOperation(> 1) */
        try {
/*@egen*/ 
	UnaryExpression() (/*@bgen(jjtree) Operator */
                            {
                              ECMAOperator jjtn001 = new ECMAOperator(this, JJTOPERATOR);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                              jjtreeOpenNodeScope(jjtn001);
                            }
                            try {
/*@egen*/ ( "*" | "/" | "%" )/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtreeCloseNodeScope(jjtn001);
                              }
                            }
/*@egen*/           UnaryExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* ECMA-262 5.1 Edition / June 2011 - Section 11.6: Additive Operators */

void AdditiveExpression()                      : 
{/*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryOperation(> 1) */
        try {
/*@egen*/
	MultiplicativeExpression() ( LOOKAHEAD(1)/*@bgen(jjtree) Operator */
                                                  {
                                                    ECMAOperator jjtn001 = new ECMAOperator(this, JJTOPERATOR);
                                                    boolean jjtc001 = true;
                                                    jjtree.openNodeScope(jjtn001);
                                                    jjtreeOpenNodeScope(jjtn001);
                                                  }
                                                  try {
/*@egen*/ ( "+" | "-" )/*@bgen(jjtree)*/
                                                  } finally {
                                                    if (jjtc001) {
                                                      jjtree.closeNodeScope(jjtn001, true);
                                                      jjtreeCloseNodeScope(jjtn001);
                                                    }
                                                  }
/*@egen*/           MultiplicativeExpression())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* ECMA-262 5.1 Edition / June 2011 - Section 11.7: Bitwise Shift Operators */

void ShiftExpression()                      :
{/*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryOperation(> 1) */
        try {
/*@egen*/
	AdditiveExpression() (/*@bgen(jjtree) Operator */
                               {
                                 ECMAOperator jjtn001 = new ECMAOperator(this, JJTOPERATOR);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                                 jjtreeOpenNodeScope(jjtn001);
                               }
                               try {
/*@egen*/ ( "<<" | ">>" | ">>>" )/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001, true);
                                   jjtreeCloseNodeScope(jjtn001);
                                 }
                               }
/*@egen*/           AdditiveExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* ECMA-262 5.1 Edition / June 2011 - Section 11.8: Relational Operators */

void RelationalExpression()                      :
{/*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryOperation(> 1) */
        try {
/*@egen*/
	ShiftExpression() (/*@bgen(jjtree) Operator */
                            {
                              ECMAOperator jjtn001 = new ECMAOperator(this, JJTOPERATOR);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                              jjtreeOpenNodeScope(jjtn001);
                            }
                            try {
/*@egen*/ ( RelationalOperatorNoIn() | "in" )/*@bgen(jjtree)*/
                            } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                throw (RuntimeException)jjte001;
                              }
                              if (jjte001 instanceof ParseException) {
                                throw (ParseException)jjte001;
                              }
                              throw (Error)jjte001;
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtreeCloseNodeScope(jjtn001);
                              }
                            }
/*@egen*/           ShiftExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void RelationalExpressionNoIn()                      :
{/*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryOperation(> 1) */
        try {
/*@egen*/
	ShiftExpression() (/*@bgen(jjtree) Operator */
                            {
                              ECMAOperator jjtn001 = new ECMAOperator(this, JJTOPERATOR);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                              jjtreeOpenNodeScope(jjtn001);
                            }
                            try {
/*@egen*/ RelationalOperatorNoIn()/*@bgen(jjtree)*/
                            } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                throw (RuntimeException)jjte001;
                              }
                              if (jjte001 instanceof ParseException) {
                                throw (ParseException)jjte001;
                              }
                              throw (Error)jjte001;
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtreeCloseNodeScope(jjtn001);
                              }
                            }
/*@egen*/           ShiftExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void RelationalOperatorNoIn()       :
{}
{
	"<" | ">" | "<=" | ">=" | "instanceof"
}

/* ECMA-262 5.1 Edition / June 2011 - Section 11.9: Equality Operators */

void EqualityExpression()                      :
{/*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryOperation(> 1) */
        try {
/*@egen*/
	RelationalExpression() ( EqualityOperator() RelationalExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void EqualityExpressionNoIn()                      :
{/*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryOperation(> 1) */
        try {
/*@egen*/
	RelationalExpressionNoIn() ( EqualityOperator() RelationalExpressionNoIn())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void EqualityOperator()           :
{/*@bgen(jjtree) Operator */
  ECMAOperator jjtn000 = new ECMAOperator(this, JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Operator */
        try {
/*@egen*/
	"==" | "!=" | "===" | "!=="/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* ECMA-262 5.1 Edition / June 2011 - Section 11.10: Binary Bitwise Operators */

void BitwiseANDExpression()                      :
{/*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryOperation(> 1) */
        try {
/*@egen*/
	EqualityExpression() ( BitwiseANDOperator() EqualityExpression())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void BitwiseANDExpressionNoIn()                      :
{/*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryOperation(> 1) */
        try {
/*@egen*/
	EqualityExpressionNoIn() (BitwiseANDOperator() EqualityExpressionNoIn())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void BitwiseANDOperator()           :
{/*@bgen(jjtree) Operator */
  ECMAOperator jjtn000 = new ECMAOperator(this, JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Operator */
        try {
/*@egen*/
	"&"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void BitwiseXORExpression()                      :
{/*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryOperation(> 1) */
        try {
/*@egen*/
	BitwiseANDExpression() (BitwiseXOROperator() BitwiseANDExpression())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void BitwiseXORExpressionNoIn()                      :
{/*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryOperation(> 1) */
        try {
/*@egen*/
	BitwiseANDExpressionNoIn() (BitwiseXOROperator() BitwiseANDExpressionNoIn())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void BitwiseXOROperator()           :
{/*@bgen(jjtree) Operator */
  ECMAOperator jjtn000 = new ECMAOperator(this, JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Operator */
        try {
/*@egen*/
	"^"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void BitwiseORExpression()                      :
{/*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryOperation(> 1) */
        try {
/*@egen*/
	BitwiseXORExpression() (BitwiseOROperator() BitwiseXORExpression())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void BitwiseORExpressionNoIn()                      :
{/*@bgen(jjtree) #BinaryOperation(> 1) */
  ECMABinaryOperation jjtn000 = new ECMABinaryOperation(this, JJTBINARYOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #BinaryOperation(> 1) */
        try {
/*@egen*/
	BitwiseXORExpressionNoIn() (BitwiseOROperator() BitwiseXORExpressionNoIn())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void BitwiseOROperator()           :
{/*@bgen(jjtree) Operator */
  ECMAOperator jjtn000 = new ECMAOperator(this, JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Operator */
        try {
/*@egen*/
	"|"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* ECMA-262 5.1 Edition / June 2011 - Section 11.11: Binary Logical Operators */

void LogicalANDExpression()                   :
{/*@bgen(jjtree) #AndOperation(> 1) */
  ECMAAndOperation jjtn000 = new ECMAAndOperation(this, JJTANDOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #AndOperation(> 1) */
        try {
/*@egen*/
	BitwiseORExpression() (LogicalANDOperator() BitwiseORExpression())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void LogicalANDExpressionNoIn()                   :
{/*@bgen(jjtree) #AndOperation(> 1) */
  ECMAAndOperation jjtn000 = new ECMAAndOperation(this, JJTANDOPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #AndOperation(> 1) */
        try {
/*@egen*/ 
	BitwiseORExpressionNoIn() (LogicalANDOperator() BitwiseORExpressionNoIn())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void LogicalANDOperator()           :
{/*@bgen(jjtree) Operator */
  ECMAOperator jjtn000 = new ECMAOperator(this, JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Operator */
        try {
/*@egen*/
	"&&"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void LogicalORExpression()                  :
{/*@bgen(jjtree) #OrOperation(> 1) */
  ECMAOrOperation jjtn000 = new ECMAOrOperation(this, JJTOROPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #OrOperation(> 1) */
        try {
/*@egen*/
	LogicalANDExpression() (LogicalOROperator() LogicalANDExpression())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void LogicalORExpressionNoIn()                  :
{/*@bgen(jjtree) #OrOperation(> 1) */
  ECMAOrOperation jjtn000 = new ECMAOrOperation(this, JJTOROPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #OrOperation(> 1) */
        try {
/*@egen*/
	LogicalANDExpressionNoIn() (LogicalOROperator() LogicalANDExpressionNoIn())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void LogicalOROperator()           :
{/*@bgen(jjtree) Operator */
  ECMAOperator jjtn000 = new ECMAOperator(this, JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Operator */
        try {
/*@egen*/
	"||"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* ECMA-262 5.1 Edition / June 2011 - Section 11.12: Conditional Operator */

void ConditionalExpression()                            :
{/*@bgen(jjtree) #ConditionalExpression(> 1) */
  ECMAConditionalExpression jjtn000 = new ECMAConditionalExpression(this, JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ConditionalExpression(> 1) */
        try {
/*@egen*/
	LogicalORExpression() [ "?" AssignmentExpression() ":" AssignmentExpression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void ConditionalExpressionNoIn()                            :
{/*@bgen(jjtree) #ConditionalExpression(> 1) */
  ECMAConditionalExpression jjtn000 = new ECMAConditionalExpression(this, JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ConditionalExpression(> 1) */
        try {
/*@egen*/
	LogicalORExpressionNoIn() [ "?" AssignmentExpression() ":" AssignmentExpressionNoIn() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* ECMA-262 5.1 Edition / June 2011 - Section 11.13: Assignment Operators */

void AssignmentExpression()                           :
{/*@bgen(jjtree) #AssignmentExpression(> 1) */
  ECMAAssignmentExpression jjtn000 = new ECMAAssignmentExpression(this, JJTASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #AssignmentExpression(> 1) */
        try {
/*@egen*/
	LOOKAHEAD(LeftHandSideExpression() AssignmentOperator()) LeftHandSideExpression() AssignmentOperator() AssignmentExpression() 
|	ConditionalExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/ 
}

void AssignmentExpressionNoIn()                           : 
{/*@bgen(jjtree) #AssignmentExpression(> 1) */
  ECMAAssignmentExpression jjtn000 = new ECMAAssignmentExpression(this, JJTASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #AssignmentExpression(> 1) */
        try {
/*@egen*/
	LOOKAHEAD(LeftHandSideExpression() AssignmentOperator()) LeftHandSideExpression() AssignmentOperator() AssignmentExpressionNoIn()
|	ConditionalExpressionNoIn()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/ 
}

void AssignmentOperator()           :
{/*@bgen(jjtree) Operator */
  ECMAOperator jjtn000 = new ECMAOperator(this, JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Operator */
        try {
/*@egen*/
	"=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|="/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* ECMA-262 5.1 Edition / June 2011 - Section 11.14: Comma Operator */

void Expression()                      :
{/*@bgen(jjtree) #CommaExpression(> 1) */
  ECMACommaExpression jjtn000 = new ECMACommaExpression(this, JJTCOMMAEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #CommaExpression(> 1) */
        try {
/*@egen*/
	AssignmentExpression() ( "," AssignmentExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void ExpressionNoIn()                      :
{/*@bgen(jjtree) #CommaExpression(> 1) */
  ECMACommaExpression jjtn000 = new ECMACommaExpression(this, JJTCOMMAEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #CommaExpression(> 1) */
        try {
/*@egen*/
	AssignmentExpressionNoIn() ( "," AssignmentExpressionNoIn() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* ECMA-262 5.1 Edition / June 2011 - Section 12: STATEMENTS */

void Statement()       :
{}
{/*@bgen(jjtree) JavaStatement */
        {
          ECMAJavaStatement jjtn001 = new ECMAJavaStatement(this, JJTJAVASTATEMENT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
        }
        try {
/*@egen*/
	< JAVA_STATEMENT >/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtreeCloseNodeScope(jjtn001);
          }
        }
/*@egen*/               
| 	LOOKAHEAD(Block()) Block()	  
|	LOOKAHEAD("var" Identifier()) VariableStatement()
|	DebuggerStatement()
|	EmptyStatement()
|	LOOKAHEAD(Identifier() ":") LabelledStatement()
|	LOOKAHEAD(ExpressionStatement())  ExpressionStatement()
|	LOOKAHEAD("if" "(") IfStatement()
|	IterationStatement()
|	LOOKAHEAD("continue") ContinueStatement()
|	LOOKAHEAD("break") BreakStatement()
|	ReturnStatement()
|	WithStatement()
|	SwitchStatement()
|	ThrowStatement()
|	TryStatement()
}

/* ECMA-262 5.1 Edition / June 2011 - Section 12.1 Block Statement */

void Block()        :
{/*@bgen(jjtree) Block */
  ECMABlock jjtn000 = new ECMABlock(this, JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Block */
        try {
/*@egen*/
	"{" ( StatementList() )? "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void StatementList()                    : 
{/*@bgen(jjtree) #StatementList(> 1) */
  ECMAStatementList jjtn000 = new ECMAStatementList(this, JJTSTATEMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #StatementList(> 1) */
        try {
/*@egen*/
	( Statement() )+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* ECMA-262 5.1 Edition / June 2011 - Section 12.2: Variable statement */

void VariableStatement()                    :
{/*@bgen(jjtree) VariableStatement */
  ECMAVariableStatement jjtn000 = new ECMAVariableStatement(this, JJTVARIABLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VariableStatement */
        try {
/*@egen*/
	"var" VariableDeclarationList() (LOOKAHEAD(2) ";")?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void VariableDeclarationList()                              :
{/*@bgen(jjtree) #VariableDeclarationList(> 1) */
  ECMAVariableDeclarationList jjtn000 = new ECMAVariableDeclarationList(this, JJTVARIABLEDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #VariableDeclarationList(> 1) */
        try {
/*@egen*/
	VariableDeclaration() ( "," VariableDeclaration() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void VariableDeclarationListNoIn()                              :
{/*@bgen(jjtree) #VariableDeclarationList(> 1) */
  ECMAVariableDeclarationList jjtn000 = new ECMAVariableDeclarationList(this, JJTVARIABLEDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #VariableDeclarationList(> 1) */
        try {
/*@egen*/
	VariableDeclarationNoIn() ( "," VariableDeclarationNoIn() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void VariableDeclaration()                      :
{/*@bgen(jjtree) VariableDeclaration */
  ECMAVariableDeclaration jjtn000 = new ECMAVariableDeclaration(this, JJTVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VariableDeclaration */
        try {
/*@egen*/
	Identifier() ( Initialiser() )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void VariableDeclarationNoIn()                      :
{/*@bgen(jjtree) VariableDeclaration */
  ECMAVariableDeclaration jjtn000 = new ECMAVariableDeclaration(this, JJTVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VariableDeclaration */
        try {
/*@egen*/
	Identifier()/*@bgen(jjtree) #EmptyExpression( jjtree . nodeArity ( ) == 0) */
                     {
                       ECMAEmptyExpression jjtn001 = new ECMAEmptyExpression(this, JJTEMPTYEXPRESSION);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                       jjtreeOpenNodeScope(jjtn001);
                     }
                     try {
/*@egen*/ ( InitialiserNoIn() )?/*@bgen(jjtree)*/
                     } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         throw (RuntimeException)jjte001;
                       }
                       if (jjte001 instanceof ParseException) {
                         throw (ParseException)jjte001;
                       }
                       throw (Error)jjte001;
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  jjtree . nodeArity ( ) == 0);
                         jjtreeCloseNodeScope(jjtn001);
                       }
                     }
/*@egen*/                                        /*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void Initialiser()       :
{}
{
	"=" AssignmentExpression()
}

void InitialiserNoIn()       :
{}
{
	"=" AssignmentExpressionNoIn()
}

/* ECMA-262 5.1 Edition / June 2011 - Section 12.3: Empty Statement */

void EmptyStatement()       :
{}
{
	";"
}

/* ECMA-262 5.1 Edition / June 2011 - Section 12.4: Expression Statement */

void ExpressionStatement()                      :
{/*@bgen(jjtree) ExpressionStatement */
  ECMAExpressionStatement jjtn000 = new ECMAExpressionStatement(this, JJTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExpressionStatement */
        try {
/*@egen*/
	Expression() (LOOKAHEAD(2) ";")?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* ECMA-262 5.1 Edition / June 2011 - Section 12.5: The if Statement */

void IfStatement()              :
{/*@bgen(jjtree) IfStatement */
  ECMAIfStatement jjtn000 = new ECMAIfStatement(this, JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfStatement */
        try {
/*@egen*/
	"if" "(" Expression() ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* ECMA-262 5.1 Edition / June 2011 - Section 12.6: Iteration Statements */

void IterationStatement()       :
{}
{/*@bgen(jjtree) DoWhileStatement */
        {
          ECMADoWhileStatement jjtn001 = new ECMADoWhileStatement(this, JJTDOWHILESTATEMENT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
        }
        try {
/*@egen*/
	( "do" Statement() "while" "(" Expression() ")" (LOOKAHEAD(2) ";")? )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtreeCloseNodeScope(jjtn001);
          }
        }
/*@egen*/                  
|/*@bgen(jjtree) WhileStatement */
        {
          ECMAWhileStatement jjtn002 = new ECMAWhileStatement(this, JJTWHILESTATEMENT);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
          jjtreeOpenNodeScope(jjtn002);
        }
        try {
/*@egen*/	( "while" "(" Expression() ")" Statement() )/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
            jjtreeCloseNodeScope(jjtn002);
          }
        }
/*@egen*/                
|	LOOKAHEAD("for" "(" (ExpressionNoIn())? ";")/*@bgen(jjtree) ForStatement */
                                                     {
                                                       ECMAForStatement jjtn006 = new ECMAForStatement(this, JJTFORSTATEMENT);
                                                       boolean jjtc006 = true;
                                                       jjtree.openNodeScope(jjtn006);
                                                       jjtreeOpenNodeScope(jjtn006);
                                                     }
                                                     try {
/*@egen*/ ( "for" "("/*@bgen(jjtree) #EmptyExpression( jjtree . nodeArity ( ) == 0) */
                                                                 {
                                                                   ECMAEmptyExpression jjtn003 = new ECMAEmptyExpression(this, JJTEMPTYEXPRESSION);
                                                                   boolean jjtc003 = true;
                                                                   jjtree.openNodeScope(jjtn003);
                                                                   jjtreeOpenNodeScope(jjtn003);
                                                                 }
                                                                 try {
/*@egen*/ ( ExpressionNoIn() )?/*@bgen(jjtree)*/
                                                                 } catch (Throwable jjte003) {
                                                                   if (jjtc003) {
                                                                     jjtree.clearNodeScope(jjtn003);
                                                                     jjtc003 = false;
                                                                   } else {
                                                                     jjtree.popNode();
                                                                   }
                                                                   if (jjte003 instanceof RuntimeException) {
                                                                     throw (RuntimeException)jjte003;
                                                                   }
                                                                   if (jjte003 instanceof ParseException) {
                                                                     throw (ParseException)jjte003;
                                                                   }
                                                                   throw (Error)jjte003;
                                                                 } finally {
                                                                   if (jjtc003) {
                                                                     jjtree.closeNodeScope(jjtn003,  jjtree . nodeArity ( ) == 0);
                                                                     jjtreeCloseNodeScope(jjtn003);
                                                                   }
                                                                 }
/*@egen*/                                         ";"/*@bgen(jjtree) #EmptyExpression( jjtree . nodeArity ( ) == 0) */
                                                                                                                                   {
                                                                                                                                     ECMAEmptyExpression jjtn004 = new ECMAEmptyExpression(this, JJTEMPTYEXPRESSION);
                                                                                                                                     boolean jjtc004 = true;
                                                                                                                                     jjtree.openNodeScope(jjtn004);
                                                                                                                                     jjtreeOpenNodeScope(jjtn004);
                                                                                                                                   }
                                                                                                                                   try {
/*@egen*/ ( Expression() )?/*@bgen(jjtree)*/
                                                                                                                                   } catch (Throwable jjte004) {
                                                                                                                                     if (jjtc004) {
                                                                                                                                       jjtree.clearNodeScope(jjtn004);
                                                                                                                                       jjtc004 = false;
                                                                                                                                     } else {
                                                                                                                                       jjtree.popNode();
                                                                                                                                     }
                                                                                                                                     if (jjte004 instanceof RuntimeException) {
                                                                                                                                       throw (RuntimeException)jjte004;
                                                                                                                                     }
                                                                                                                                     if (jjte004 instanceof ParseException) {
                                                                                                                                       throw (ParseException)jjte004;
                                                                                                                                     }
                                                                                                                                     throw (Error)jjte004;
                                                                                                                                   } finally {
                                                                                                                                     if (jjtc004) {
                                                                                                                                       jjtree.closeNodeScope(jjtn004,  jjtree . nodeArity ( ) == 0);
                                                                                                                                       jjtreeCloseNodeScope(jjtn004);
                                                                                                                                     }
                                                                                                                                   }
/*@egen*/                                         ";"/*@bgen(jjtree) #EmptyExpression( jjtree . nodeArity ( ) == 0) */
                                                                                                                                                                                                 {
                                                                                                                                                                                                   ECMAEmptyExpression jjtn005 = new ECMAEmptyExpression(this, JJTEMPTYEXPRESSION);
                                                                                                                                                                                                   boolean jjtc005 = true;
                                                                                                                                                                                                   jjtree.openNodeScope(jjtn005);
                                                                                                                                                                                                   jjtreeOpenNodeScope(jjtn005);
                                                                                                                                                                                                 }
                                                                                                                                                                                                 try {
/*@egen*/ ( Expression() )?/*@bgen(jjtree)*/
                                                                                                                                                                                                 } catch (Throwable jjte005) {
                                                                                                                                                                                                   if (jjtc005) {
                                                                                                                                                                                                     jjtree.clearNodeScope(jjtn005);
                                                                                                                                                                                                     jjtc005 = false;
                                                                                                                                                                                                   } else {
                                                                                                                                                                                                     jjtree.popNode();
                                                                                                                                                                                                   }
                                                                                                                                                                                                   if (jjte005 instanceof RuntimeException) {
                                                                                                                                                                                                     throw (RuntimeException)jjte005;
                                                                                                                                                                                                   }
                                                                                                                                                                                                   if (jjte005 instanceof ParseException) {
                                                                                                                                                                                                     throw (ParseException)jjte005;
                                                                                                                                                                                                   }
                                                                                                                                                                                                   throw (Error)jjte005;
                                                                                                                                                                                                 } finally {
                                                                                                                                                                                                   if (jjtc005) {
                                                                                                                                                                                                     jjtree.closeNodeScope(jjtn005,  jjtree . nodeArity ( ) == 0);
                                                                                                                                                                                                     jjtreeCloseNodeScope(jjtn005);
                                                                                                                                                                                                   }
                                                                                                                                                                                                 }
/*@egen*/                                         ")" Statement() )/*@bgen(jjtree)*/
                                                     } catch (Throwable jjte006) {
                                                       if (jjtc006) {
                                                         jjtree.clearNodeScope(jjtn006);
                                                         jjtc006 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte006 instanceof RuntimeException) {
                                                         throw (RuntimeException)jjte006;
                                                       }
                                                       if (jjte006 instanceof ParseException) {
                                                         throw (ParseException)jjte006;
                                                       }
                                                       throw (Error)jjte006;
                                                     } finally {
                                                       if (jjtc006) {
                                                         jjtree.closeNodeScope(jjtn006, true);
                                                         jjtreeCloseNodeScope(jjtn006);
                                                       }
                                                     }
/*@egen*/               
|	LOOKAHEAD("for" "(" "var" VariableDeclarationList() ";")/*@bgen(jjtree) ForVarStatement */
                                                                 {
                                                                   ECMAForVarStatement jjtn009 = new ECMAForVarStatement(this, JJTFORVARSTATEMENT);
                                                                   boolean jjtc009 = true;
                                                                   jjtree.openNodeScope(jjtn009);
                                                                   jjtreeOpenNodeScope(jjtn009);
                                                                 }
                                                                 try {
/*@egen*/ ( "for" "(" "var" VariableDeclarationList() ";"/*@bgen(jjtree) #EmptyExpression( jjtree . nodeArity ( ) == 0) */
                                                                                                                 {
                                                                                                                   ECMAEmptyExpression jjtn007 = new ECMAEmptyExpression(this, JJTEMPTYEXPRESSION);
                                                                                                                   boolean jjtc007 = true;
                                                                                                                   jjtree.openNodeScope(jjtn007);
                                                                                                                   jjtreeOpenNodeScope(jjtn007);
                                                                                                                 }
                                                                                                                 try {
/*@egen*/ ( Expression() )?/*@bgen(jjtree)*/
                                                                                                                 } catch (Throwable jjte007) {
                                                                                                                   if (jjtc007) {
                                                                                                                     jjtree.clearNodeScope(jjtn007);
                                                                                                                     jjtc007 = false;
                                                                                                                   } else {
                                                                                                                     jjtree.popNode();
                                                                                                                   }
                                                                                                                   if (jjte007 instanceof RuntimeException) {
                                                                                                                     throw (RuntimeException)jjte007;
                                                                                                                   }
                                                                                                                   if (jjte007 instanceof ParseException) {
                                                                                                                     throw (ParseException)jjte007;
                                                                                                                   }
                                                                                                                   throw (Error)jjte007;
                                                                                                                 } finally {
                                                                                                                   if (jjtc007) {
                                                                                                                     jjtree.closeNodeScope(jjtn007,  jjtree . nodeArity ( ) == 0);
                                                                                                                     jjtreeCloseNodeScope(jjtn007);
                                                                                                                   }
                                                                                                                 }
/*@egen*/                                         ";"/*@bgen(jjtree) #EmptyExpression( jjtree . nodeArity ( ) == 0) */
                                                                                                                                                                               {
                                                                                                                                                                                 ECMAEmptyExpression jjtn008 = new ECMAEmptyExpression(this, JJTEMPTYEXPRESSION);
                                                                                                                                                                                 boolean jjtc008 = true;
                                                                                                                                                                                 jjtree.openNodeScope(jjtn008);
                                                                                                                                                                                 jjtreeOpenNodeScope(jjtn008);
                                                                                                                                                                               }
                                                                                                                                                                               try {
/*@egen*/ ( Expression() )?/*@bgen(jjtree)*/
                                                                                                                                                                               } catch (Throwable jjte008) {
                                                                                                                                                                                 if (jjtc008) {
                                                                                                                                                                                   jjtree.clearNodeScope(jjtn008);
                                                                                                                                                                                   jjtc008 = false;
                                                                                                                                                                                 } else {
                                                                                                                                                                                   jjtree.popNode();
                                                                                                                                                                                 }
                                                                                                                                                                                 if (jjte008 instanceof RuntimeException) {
                                                                                                                                                                                   throw (RuntimeException)jjte008;
                                                                                                                                                                                 }
                                                                                                                                                                                 if (jjte008 instanceof ParseException) {
                                                                                                                                                                                   throw (ParseException)jjte008;
                                                                                                                                                                                 }
                                                                                                                                                                                 throw (Error)jjte008;
                                                                                                                                                                               } finally {
                                                                                                                                                                                 if (jjtc008) {
                                                                                                                                                                                   jjtree.closeNodeScope(jjtn008,  jjtree . nodeArity ( ) == 0);
                                                                                                                                                                                   jjtreeCloseNodeScope(jjtn008);
                                                                                                                                                                                 }
                                                                                                                                                                               }
/*@egen*/                                         ")" Statement() )/*@bgen(jjtree)*/
                                                                 } catch (Throwable jjte009) {
                                                                   if (jjtc009) {
                                                                     jjtree.clearNodeScope(jjtn009);
                                                                     jjtc009 = false;
                                                                   } else {
                                                                     jjtree.popNode();
                                                                   }
                                                                   if (jjte009 instanceof RuntimeException) {
                                                                     throw (RuntimeException)jjte009;
                                                                   }
                                                                   if (jjte009 instanceof ParseException) {
                                                                     throw (ParseException)jjte009;
                                                                   }
                                                                   throw (Error)jjte009;
                                                                 } finally {
                                                                   if (jjtc009) {
                                                                     jjtree.closeNodeScope(jjtn009, true);
                                                                     jjtreeCloseNodeScope(jjtn009);
                                                                   }
                                                                 }
/*@egen*/                 
|	LOOKAHEAD("for" "(" "var" VariableDeclarationNoIn() "in")/*@bgen(jjtree) ForVarInStatement */
                                                                  {
                                                                    ECMAForVarInStatement jjtn010 = new ECMAForVarInStatement(this, JJTFORVARINSTATEMENT);
                                                                    boolean jjtc010 = true;
                                                                    jjtree.openNodeScope(jjtn010);
                                                                    jjtreeOpenNodeScope(jjtn010);
                                                                  }
                                                                  try {
/*@egen*/ ( "for" "(" "var" VariableDeclarationNoIn() "in" Expression() ")" Statement() )/*@bgen(jjtree)*/
                                                                  } catch (Throwable jjte010) {
                                                                    if (jjtc010) {
                                                                      jjtree.clearNodeScope(jjtn010);
                                                                      jjtc010 = false;
                                                                    } else {
                                                                      jjtree.popNode();
                                                                    }
                                                                    if (jjte010 instanceof RuntimeException) {
                                                                      throw (RuntimeException)jjte010;
                                                                    }
                                                                    if (jjte010 instanceof ParseException) {
                                                                      throw (ParseException)jjte010;
                                                                    }
                                                                    throw (Error)jjte010;
                                                                  } finally {
                                                                    if (jjtc010) {
                                                                      jjtree.closeNodeScope(jjtn010, true);
                                                                      jjtreeCloseNodeScope(jjtn010);
                                                                    }
                                                                  }
/*@egen*/                   
|/*@bgen(jjtree) ForInStatement */
        {
          ECMAForInStatement jjtn011 = new ECMAForInStatement(this, JJTFORINSTATEMENT);
          boolean jjtc011 = true;
          jjtree.openNodeScope(jjtn011);
          jjtreeOpenNodeScope(jjtn011);
        }
        try {
/*@egen*/	( "for" "(" LeftHandSideExpression() "in" Expression() ")" Statement() )/*@bgen(jjtree)*/
        } catch (Throwable jjte011) {
          if (jjtc011) {
            jjtree.clearNodeScope(jjtn011);
            jjtc011 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte011 instanceof RuntimeException) {
            throw (RuntimeException)jjte011;
          }
          if (jjte011 instanceof ParseException) {
            throw (ParseException)jjte011;
          }
          throw (Error)jjte011;
        } finally {
          if (jjtc011) {
            jjtree.closeNodeScope(jjtn011, true);
            jjtreeCloseNodeScope(jjtn011);
          }
        }
/*@egen*/                
}

/* ECMA-262 5.1 Edition / June 2011 - Section 12.7: The continue Statement */

void ContinueStatement()                    :
{/*@bgen(jjtree) ContinueStatement */
  ECMAContinueStatement jjtn000 = new ECMAContinueStatement(this, JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ContinueStatement */
        try {
/*@egen*/
	"continue" ( LOOKAHEAD(Identifier()) Identifier() )? (LOOKAHEAD(";") ";")?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* ECMA-262 5.1 Edition / June 2011 - Section 12.8: The break Statement */

void BreakStatement()                 :
{/*@bgen(jjtree) BreakStatement */
  ECMABreakStatement jjtn000 = new ECMABreakStatement(this, JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BreakStatement */
        try {
/*@egen*/
	"break" ( LOOKAHEAD(Identifier()) Identifier() )? (LOOKAHEAD(";") ";")?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* ECMA-262 5.1 Edition / June 2011 - Section 12.9 The return Statement */

void ReturnStatement()                  :
{/*@bgen(jjtree) ReturnStatement */
  ECMAReturnStatement jjtn000 = new ECMAReturnStatement(this, JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReturnStatement */
        try {
/*@egen*/
	"return" ( LOOKAHEAD(Expression()) Expression() )? (LOOKAHEAD(";") ";")?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* ECMA-262 5.1 Edition / June 2011 - Section 12.10: The with Statement */

void WithStatement()                :
{/*@bgen(jjtree) WithStatement */
  ECMAWithStatement jjtn000 = new ECMAWithStatement(this, JJTWITHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WithStatement */
        try {
/*@egen*/
	"with" "(" Expression() ")" Statement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* ECMA-262 5.1 Edition / June 2011 - 12.11 The switch Statement */

void SwitchStatement()                  :
{/*@bgen(jjtree) SwitchStatement */
  ECMASwitchStatement jjtn000 = new ECMASwitchStatement(this, JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SwitchStatement */
        try {
/*@egen*/
	"switch" "(" Expression() ")" CaseBlock()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void CaseBlock()            :
{/*@bgen(jjtree) CaseBlock */
  ECMACaseBlock jjtn000 = new ECMACaseBlock(this, JJTCASEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CaseBlock */
        try {
/*@egen*/
	"{" ( CaseClauses() )? ( "}" | DefaultClause() ( CaseClauses() )? "}" )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void CaseClauses()       :
{}
{
	( CaseClause() )+
}

void CaseClause()              :
{/*@bgen(jjtree) CaseClause */
  ECMACaseClause jjtn000 = new ECMACaseClause(this, JJTCASECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CaseClause */
        try {
/*@egen*/
	(/*@bgen(jjtree) Case */
          {
            ECMACase jjtn001 = new ECMACase(this, JJTCASE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
          }
          try {
/*@egen*/ ( "case" Expression() ":" )/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              jjtreeCloseNodeScope(jjtn001);
            }
          }
/*@egen*/       ) ( StatementList() )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void DefaultClause()             :
{/*@bgen(jjtree) CaseClause */
  ECMACaseClause jjtn000 = new ECMACaseClause(this, JJTCASECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CaseClause */
        try {
/*@egen*/
	(/*@bgen(jjtree) Case */
          {
            ECMACase jjtn001 = new ECMACase(this, JJTCASE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
          }
          try {
/*@egen*/ ( "default" ":" )/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              jjtreeCloseNodeScope(jjtn001);
            }
          }
/*@egen*/       ) ( StatementList() )?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* ECMA-262 5.1 Edition / June 2011 - Section 12.12: Labelled Statements */

void LabelledStatement()                   :
{/*@bgen(jjtree) LabelledStatement */
  ECMALabelledStatement jjtn000 = new ECMALabelledStatement(this, JJTLABELLEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LabelledStatement */
        try {
/*@egen*/
	Identifier() ":" Statement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void ThrowStatement()                 :
{/*@bgen(jjtree) ThrowStatement */
  ECMAThrowStatement jjtn000 = new ECMAThrowStatement(this, JJTTHROWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ThrowStatement */
        try {
/*@egen*/
	"throw" Expression() (LOOKAHEAD(";") ";")?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void TryStatement()               : 
{/*@bgen(jjtree) TryStatement */
  ECMATryStatement jjtn000 = new ECMATryStatement(this, JJTTRYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TryStatement */
        try {
/*@egen*/
	"try" Block() ( ( Finally() | Catch() [Finally()] ) )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}  

void Catch()        :
{/*@bgen(jjtree) Catch */
  ECMACatch jjtn000 = new ECMACatch(this, JJTCATCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Catch */
        try {
/*@egen*/
	"catch" "(" Identifier() ")" Block()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void Finally()          :
{/*@bgen(jjtree) Finally */
  ECMAFinally jjtn000 = new ECMAFinally(this, JJTFINALLY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Finally */
        try {
/*@egen*/
	"finally" Block()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* ECMA-262 5.1 Edition / June 2011 - Section 12.15 The debugger Statement */

void DebuggerStatement()                    :
{/*@bgen(jjtree) DebuggerStatement */
  ECMADebuggerStatement jjtn000 = new ECMADebuggerStatement(this, JJTDEBUGGERSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DebuggerStatement */
        try {
/*@egen*/
	"debugger" (LOOKAHEAD(";") ";")?/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

/* ECMA-262 5.1 Edition / June 2011 - Section 13: Function Definition */

void FunctionDeclaration()                      :
{/*@bgen(jjtree) FunctionDeclaration */
  ECMAFunctionDeclaration jjtn000 = new ECMAFunctionDeclaration(this, JJTFUNCTIONDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionDeclaration */
        try {
/*@egen*/
	"function" Identifier()/*@bgen(jjtree) FormalParameterList */
                                {
                                  ECMAFormalParameterList jjtn001 = new ECMAFormalParameterList(this, JJTFORMALPARAMETERLIST);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtreeOpenNodeScope(jjtn001);
                                }
                                try {
/*@egen*/ ( "(" ( FormalParameterList() )? ")" )/*@bgen(jjtree)*/
                                } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte001;
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    throw (ParseException)jjte001;
                                  }
                                  throw (Error)jjte001;
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtreeCloseNodeScope(jjtn001);
                                  }
                                }
/*@egen*/                      FunctionBody()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/  
}

void FunctionExpression()                     :
{/*@bgen(jjtree) FunctionExpression */
  ECMAFunctionExpression jjtn000 = new ECMAFunctionExpression(this, JJTFUNCTIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionExpression */
        try {
/*@egen*/
	"function" ( Identifier() )?/*@bgen(jjtree) FormalParameterList */
                                     {
                                       ECMAFormalParameterList jjtn001 = new ECMAFormalParameterList(this, JJTFORMALPARAMETERLIST);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                       jjtreeOpenNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*/ ( "(" ( FormalParameterList() )? ")" )/*@bgen(jjtree)*/
                                     } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte001;
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         throw (ParseException)jjte001;
                                       }
                                       throw (Error)jjte001;
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001, true);
                                         jjtreeCloseNodeScope(jjtn001);
                                       }
                                     }
/*@egen*/                      FunctionBody()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void FormalParameterList()       :
{}
{
	Identifier() ( "," Identifier() )*
}

void FunctionBody()        :
{/*@bgen(jjtree) Block */
  ECMABlock jjtn000 = new ECMABlock(this, JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Block */
        try {
/*@egen*/
	"{" (SourceElements())? "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/ 
}

/* ECMA-262 5.1 Edition / June 2011 - Section 14: Script */

ECMAProgram Program()          :
{/*@bgen(jjtree) Program */
  ECMAProgram jjtn000 = new ECMAProgram(this, JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
        try {
/*@egen*/  
	(SourceElements())? <EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void SourceElements()       :
{}
{
	(SourceElement())+ 
}

void SourceElement()       :
{}
{
	LOOKAHEAD(FunctionDeclaration()) FunctionDeclaration()
|	Statement()
}

/* ECMA-262 5.1 Edition / June 2011 - Section 7.6: Identifiers */

void Identifier()             :
{/*@bgen(jjtree) Identifier */
        ECMAIdentifier jjtn000 = new ECMAIdentifier(this, JJTIDENTIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Identifier */
        try {
/*@egen*/
	t = < IDENTIFIER_NAME >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
        }
/*@egen*/
	{
		jjtn000.jjtSetValue(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

TOKEN:
{
	< IDENTIFIER_NAME: <IDENTIFIER_START> (<IDENTIFIER_PART>)* >
|
	< #IDENTIFIER_START:
		<UNICODE_LETTER>
	| 
		<DOLLAR_SIGN>
	| 
		<UNDER_SCORE>
	| 
		<UNICODE_ESCAPE_SEQUENCE>
	>
|
	< #IDENTIFIER_PART: 
		<IDENTIFIER_START>
	| 
		<UNICODE_COMBINING_MARK>
	| 
		<UNICODE_DIGIT>
	| 
		<UNICODE_CONNECTOR_PUNCTUATION>
	| 
		<UNICODE_ESCAPE_SEQUENCE>
	>
|
	< #DOLLAR_SIGN: "$" >
|  
	< #UNDER_SCORE: "_" >
|
	< #UNICODE_LETTER: 
		["A"-"Z"]
	|	["a"-"z"]
	|	["A"-"Z"] 
	|	["a"-"z"] 
	|	["\u00aa"] 
	|	["\u00b5"]
	|	["\u00ba"] 
	|	["\u00c0"-"\u00d6"] 
	|	["\u00d8"-"\u00f6"] 
	|	["\u00f8"-"\u021f"]
	|	["\u0222"-"\u0233"] 
	|	["\u0250"-"\u02ad"] 
	|	["\u02b0"-"\u02b8"] 
	|	["\u02bb"-"\u02c1"]
	|	["\u02d0"-"\u02d1"] 
	|	["\u02e0"-"\u02e4"] 
	|	["\u02ee"] 
	|	["\u037a"]
	|	["\u0386"] 
	|	["\u0388"-"\u038a"]
	|	["\u038c"]
	|	["\u038e"-"\u03a1"]
	|	["\u03a3"-"\u03ce"] 
	|	["\u03d0"-"\u03d7"] 
	|	["\u03da"-"\u03f3"]
	|	["\u0400"-"\u0481"]
	|	["\u048c"-"\u04c4"]
	|	["\u04c7"-"\u04c8"]
	|	["\u04cb"-"\u04cc"] 
	|	["\u04d0"-"\u04f5"]
	|	["\u04f8"-"\u04f9"]
	|	["\u0531"-"\u0556"]
	|	["\u0559"]
	|	["\u0561"-"\u0587"]
	|	["\u05d0"-"\u05ea"]
	|	["\u05f0"-"\u05f2"] 
	|	["\u0621"-"\u063a"] 
	|	["\u0640"-"\u064a"]
	|	["\u0671"-"\u06d3"]
	|	["\u06d5"] 
	|	["\u06e5"-"\u06e6"] 
	|	["\u06fa"-"\u06fc"]
	|	["\u0710"] 
	|	["\u0712"-"\u072c"] 
	|	["\u0780"-"\u07a5"] 
	|	["\u0905"-"\u0939"]
	|	["\u093d"] 
	|	["\u0950"] 
	|	["\u0958"-"\u0961"] 
	|	["\u0985"-"\u098c"]
	|	["\u098f"-"\u0990"] 
	|	["\u0993"-"\u09a8"] 
	|	["\u09aa"-"\u09b0"] 
	|	["\u09b2"]
	|	["\u09b6"-"\u09b9"] 
	|	["\u09dc"-"\u09dd"] 
	|	["\u09df"-"\u09e1"] 
	|	["\u09f0"-"\u09f1"]
	|	["\u0a05"-"\u0a0a"] 
	|	["\u0a0f"-"\u0a10"] 
	|	["\u0a13"-"\u0a28"] 
	|	["\u0a2a"-"\u0a30"]
	|	["\u0a32"-"\u0a33"] 
	|	["\u0a35"-"\u0a36"] 
	|	["\u0a38"-"\u0a39"] 
	|	["\u0a59"-"\u0a5c"]
	|	["\u0a5e"] 
	|	["\u0a72"-"\u0a74"] 
	|	["\u0a85"-"\u0a8b"] 
	|	["\u0a8d"]
	|	["\u0a8f"-"\u0a91"] 
	|	["\u0a93"-"\u0aa8"] 
	|	["\u0aaa"-"\u0ab0"] 
	|	["\u0ab2"-"\u0ab3"]
	|	["\u0ab5"-"\u0ab9"] 
	|	["\u0abd"] 
	|	["\u0ad0"] 
	|	["\u0ae0"]
	|	["\u0b05"-"\u0b0c"] 
	|	["\u0b0f"-"\u0b10"] 
	|	["\u0b13"-"\u0b28"] 
	|	["\u0b2a"-"\u0b30"]
	|	["\u0b32"-"\u0b33"] 
	|	["\u0b36"-"\u0b39"] 
	|	["\u0b3d"] 
	|	["\u0b5c"-"\u0b5d"]
	|	["\u0b5f"-"\u0b61"] 
	|	["\u0b85"-"\u0b8a"]
	|	["\u0b8e"-"\u0b90"] 
	|	["\u0b92"-"\u0b95"]
	|	["\u0b99"-"\u0b9a"] 
	|	["\u0b9c"] 
	|	["\u0b9e"-"\u0b9f"] 
	|	["\u0ba3"-"\u0ba4"]
	|	["\u0ba8"-"\u0baa"] 
	|	["\u0bae"-"\u0bb5"] 
	|	["\u0bb7"-"\u0bb9"] 
	|	["\u0c05"-"\u0c0c"]
	|	["\u0c0e"-"\u0c10"] 
	|	["\u0c12"-"\u0c28"]
	|	["\u0c2a"-"\u0c33"]
	|	["\u0c35"-"\u0c39"]
	|	["\u0c60"-"\u0c61"]
	|	["\u0c85"-"\u0c8c"]
	|	["\u0c8e"-"\u0c90"]
	|	["\u0c92"-"\u0ca8"]
	|	["\u0caa"-"\u0cb3"]
	|	["\u0cb5"-"\u0cb9"]
	|	["\u0cde"]
	|	["\u0ce0"-"\u0ce1"]
	|	["\u0d05"-"\u0d0c"]
	|	["\u0d0e"-"\u0d10"]
	|	["\u0d12"-"\u0d28"]
	|	["\u0d2a"-"\u0d39"]
	|	["\u0d60"-"\u0d61"]
	|	["\u0d85"-"\u0d96"]
	|	["\u0d9a"-"\u0db1"]
	|	["\u0db3"-"\u0dbb"]
	|	["\u0dbd"]
	|	["\u0dc0"-"\u0dc6"]
	|	["\u0e01"-"\u0e30"]
	|	["\u0e32"-"\u0e33"]
	|	["\u0e40"-"\u0e46"]
	|	["\u0e81"-"\u0e82"]
	|	["\u0e84"]
	|	["\u0e87"-"\u0e88"]
	|	["\u0e8a"]
	|	["\u0e8d"]
	|	["\u0e94"-"\u0e97"]
	|	["\u0e99"-"\u0e9f"]
	|	["\u0ea1"-"\u0ea3"]
	|	["\u0ea5"]
	|	["\u0ea7"]
	|	["\u0eaa"-"\u0eab"]
	|	["\u0ead"-"\u0eb0"]
	|	["\u0eb2"-"\u0eb3"]
	|	["\u0ebd"-"\u0ec4"]
	|	["\u0ec6"]
	|	["\u0edc"-"\u0edd"]
	|	["\u0f00"]
	|	["\u0f40"-"\u0f6a"]
	|	["\u0f88"-"\u0f8b"]
	|	["\u1000"-"\u1021"]
	|	["\u1023"-"\u1027"]
	|	["\u1029"-"\u102a"]
	|	["\u1050"-"\u1055"]
	|	["\u10a0"-"\u10c5"]
	|	["\u10d0"-"\u10f6"]
	|	["\u1100"-"\u1159"]
	|	["\u115f"-"\u11a2"]
	|	["\u11a8"-"\u11f9"]
	|	["\u1200"-"\u1206"]
	|	["\u1208"-"\u1246"]
	|	["\u1248"]
	|	["\u124a"-"\u124d"]
	|	["\u1250"-"\u1256"]
	|	["\u1258"]
	|	["\u125a"-"\u125d"]
	|	["\u1260"-"\u1286"]
	|	["\u1288"]
	|	["\u128a"-"\u128d"]
	|	["\u1290"-"\u12ae"]
	|	["\u12b0"]
	|	["\u12b2"-"\u12b5"]
	|	["\u12b8"-"\u12be"]
	|	["\u12c0"]
	|	["\u12c2"-"\u12c5"]
	|	["\u12c8"-"\u12ce"]
	|	["\u12d0"-"\u12d6"]
	|	["\u12d8"-"\u12ee"]
	|	["\u12f0"-"\u130e"]
	|	["\u1310"]
	|	["\u1312"-"\u1315"]
	|	["\u1318"-"\u131e"]
	|	["\u1320"-"\u1346"]
	|	["\u1348"-"\u135a"]
	|	["\u13a0"-"\u13b0"]
	|	["\u13b1"-"\u13f4"]
	|	["\u1401"-"\u1676"]
	|	["\u1681"-"\u169a"]
	|	["\u16a0"-"\u16ea"]
	|	["\u1780"-"\u17b3"]
	|	["\u1820"-"\u1877"]
	|	["\u1880"-"\u18a8"]
	|	["\u1e00"-"\u1e9b"]
	|	["\u1ea0"-"\u1ee0"]
	|	["\u1ee1"-"\u1ef9"]
	|	["\u1f00"-"\u1f15"]
	|	["\u1f18"-"\u1f1d"]
	|	["\u1f20"-"\u1f39"]
	|	["\u1f3a"-"\u1f45"]
	|	["\u1f48"-"\u1f4d"]
	|	["\u1f50"-"\u1f57"]
	|	["\u1f59"]
	|	["\u1f5b"]
	|	["\u1f5d"]
	|	["\u1f5f"-"\u1f7d"]
	|	["\u1f80"-"\u1fb4"]
	|	["\u1fb6"-"\u1fbc"]
	|	["\u1fbe"]
	|	["\u1fc2"-"\u1fc4"]
	|	["\u1fc6"-"\u1fcc"]
	|	["\u1fd0"-"\u1fd3"]
	|	["\u1fd6"-"\u1fdb"]
	|	["\u1fe0"-"\u1fec"]
	|	["\u1ff2"-"\u1ff4"]
	|	["\u1ff6"-"\u1ffc"]
	|	["\u207f"]
	|	["\u2102"]
	|	["\u2107"]
	|	["\u210a"-"\u2113"]
	|	["\u2115"]
	|	["\u2119"-"\u211d"]
	|	["\u2124"]
	|	["\u2126"]
	|	["\u2128"]
	|	["\u212a"-"\u212d"]
	|	["\u212f"-"\u2131"]
	|	["\u2133"-"\u2139"]
	|	["\u2160"-"\u2183"]
	|	["\u3005"-"\u3007"]
	|	["\u3021"-"\u3029"]
	|	["\u3031"-"\u3035"]
	|	["\u3038"-"\u303a"]
	|	["\u3041"-"\u3094"]
	|	["\u309d"-"\u309e"]
	|	["\u30a1"-"\u30fa"]
	|	["\u30fc"-"\u30fe"]
	|	["\u3105"-"\u312c"]
	|	["\u3131"-"\u318e"]
	|	["\u31a0"-"\u31b7"]
	|	["\u3400"]
	|	["\u4db5"]
	|	["\u4e00"]
	|	["\u9fa5"]
	|	["\ua000"-"\ua48c"]
	|	["\uac00"]
	|	["\ud7a3"]
	|	["\uf900"-"\ufa2d"]
	|	["\ufb00"-"\ufb06"]
	|	["\ufb13"-"\ufb17"]
	|	["\ufb1d"]
	|	["\ufb1f"-"\ufb28"]
	|	["\ufb2a"-"\ufb36"]
	|	["\ufb38"-"\ufb3c"]
	|	["\ufb3e"]
	|	["\ufb40"-"\ufb41"]
	|	["\ufb43"-"\ufb44"]
	|	["\ufb46"-"\ufbb1"]
	|	["\ufbd3"-"\ufd3d"]
	|	["\ufd50"-"\ufd8f"]
	|	["\ufd92"-"\ufdc7"]
	|	["\ufdf0"-"\ufdfb"]
	|	["\ufe70"-"\ufe72"]
	|	["\ufe74"]
	|	["\ufe76"-"\ufefc"]
	|	["\uff21"-"\uff3a"]
	|	["\uff41"-"\uff5a"]
	|	["\uff66"-"\uffbe"]
	|	["\uffc2"-"\uffc7"]
	|	["\uffca"-"\uffcf"]
	|	["\uffd2"-"\uffd7"]
	|	["\uffda"-"\uffdc"]
	>
} 

/*
 * Unicode categories Non-spacing mark (MN) OR Combining spacing mark (MC)
 */
MORE:
{
	< UNICODE_COMBINING_MARK: <MN> | <MC> >
}


TOKEN:
{
	< MC: 
		["\u0903"]
	|	["\u093e"]
	|	["\u093f"]
	|	["\u0940"]
	|	["\u0949"]
	|	["\u094a"]
	|	["\u094b"]
	|	["\u094c"]
	|	["\u0982"]
	|	["\u0983"]
	|	["\u09be"]
	|	["\u09bf"]
	|	["\u09c0"]
	|	["\u09c7"]
	|	["\u09c8"]
	|	["\u09cb"]
	|	["\u09cc"]
	|	["\u09d7"]
	|	["\u0a03"]
	|	["\u0a3e"]
	|	["\u0a3f"]
	|	["\u0a40"]
	|	["\u0a83"]
	|	["\u0abe"]
	|	["\u0abf"]
	|	["\u0ac0"]
	|	["\u0ac9"]
	|	["\u0acb"]
	|	["\u0acc"]
	|	["\u0b02"]
	|	["\u0b03"]
	|	["\u0b3e"]
	|	["\u0b40"]
	|	["\u0b47"]
	|	["\u0b48"]
	|	["\u0b4b"]
	|	["\u0b4c"]
	|	["\u0b57"]
	|	["\u0bbe"]
	|	["\u0bbf"]
	|	["\u0bc1"]
	|	["\u0bc2"]
	|	["\u0bc6"]
	|	["\u0bc7"]
	|	["\u0bc8"]
	|	["\u0bca"]
	|	["\u0bcb"]
	|	["\u0bcc"]
	|	["\u0bd7"]
	|	["\u0c01"]
	|	["\u0c02"]
	|	["\u0c03"]
	|	["\u0c41"]
	|	["\u0c42"]
	|	["\u0c43"]
	|	["\u0c44"]
	|	["\u0c82"]
	|	["\u0c83"]
	|	["\u0cbe"]
	|	["\u0cc0"]
	|	["\u0cc1"]
	|	["\u0cc2"]
	|	["\u0cc3"]
	|	["\u0cc4"]
	|	["\u0cc7"]
	|	["\u0cc8"]
	|	["\u0cca"]
	|	["\u0ccb"]
	|	["\u0cd5"]
	|	["\u0cd6"]
	|	["\u0d02"]
	|	["\u0d03"]
	|	["\u0d3e"]
	|	["\u0d3f"]
	|	["\u0d40"]
	|	["\u0d46"]
	|	["\u0d47"]
	|	["\u0d48"]
	|	["\u0d4a"]
	|	["\u0d4b"]
	|	["\u0d4c"]
	|	["\u0d57"]
	|	["\u0d82"]
	|	["\u0d83"]
	|	["\u0dcf"]
	|	["\u0dd0"]
	|	["\u0dd1"]
	|	["\u0dd8"]
	|	["\u0dd9"]
	|	["\u0dda"]
	|	["\u0ddb"]
	|	["\u0ddc"]
	|	["\u0ddd"]
	|	["\u0dde"]
	|	["\u0ddf"]
	|	["\u0df2"]
	|	["\u0df3"]
	|	["\u0f3e"]
	|	["\u0f3f"]
	|	["\u0f7f"]
	|	["\u102c"]
	|	["\u1031"]
	|	["\u1038"]
	|	["\u1056"]
	|	["\u1057"]
	|	["\u17b6"]
	|	["\u17be"]
	|	["\u17bf"]
	|	["\u17c0"]
	|	["\u17c1"]
	|	["\u17c2"]
	|	["\u17c3"]
	|	["\u17c4"]
	|	["\u17c5"]
	|	["\u17c7"]
	|	["\u17c8"]
	|	["\u1923"]
	|	["\u1924"]
	|	["\u1925"]
	|	["\u1926"]
	|	["\u1929"]
	|	["\u192a"]
	|	["\u192b"]
	|	["\u1930"]
	|	["\u1931"]
	|	["\u1933"]
	|	["\u1934"]
	|	["\u1935"]
	|	["\u1936"]
	|	["\u1937"]
	|	["\u1938"]
	|	["\u19b0"]
	|	["\u19b1"]
	|	["\u19b2"]
	|	["\u19b3"]
	|	["\u19b4"]
	|	["\u19b5"]
	|	["\u19b6"]
	|	["\u19b7"]
	|	["\u19b8"]
	|	["\u19b9"]
	|	["\u19ba"]
	|	["\u19bb"]
	|	["\u19bc"]
	|	["\u19bd"]
	|	["\u19be"]
	|	["\u19bf"]
	|	["\u19c0"]
	|	["\u19c8"]
	|	["\u19c9"]
	|	["\u1a19"]
	|	["\u1a1a"]
	|	["\u1a1b"]
	|	["\ua802"]
	|	["\ua823"]
	|	["\ua824"]
	|	["\ua827"]
	|	["\u1d16"]
	|	["\u1d16"]
	|	["\u1d16"]
	|	["\u1d16"]
	|	["\u1d16"]
	|	["\u1d17"]
	|	["\u1d17"]
	|	["\u1d17"] 
	>
|	< MN: 
		["\u0300"-"\u034e"] 
	|	["\u0360"-"\u0362"] 
	|	["\u0483"-"\u0486"] 
	|	["\u0591"-"\u05a1"]
	|	["\u05a3"-"\u05b9"] 
	|	["\u05bb"-"\u05bd"] 
	|	["\u05bf"]
	|	["\u05c1"-"\u05c2"]
	|	["\u05c4"]
	|	["\u064b"-"\u0655"] 
	|	["\u0670"]
	|	["\u06d6"-"\u06dc"]
	|	["\u06df"-"\u06e4"] 
	|	["\u06e7"-"\u06e8"] 
	|	["\u06ea"-"\u06ed"] 
	|	["\u0711"]
	|	["\u0730"-"\u074a"] 
	|	["\u07a6"-"\u07b0"] 
	|	["\u0901"-"\u0903"] 
	|	["\u093c"]
	|	["\u093e"-"\u094d"] 
	|	["\u0951"-"\u0954"] 
	|	["\u0962"-"\u0963"] 
	|	["\u0981"-"\u0983"]
	|	["\u09bc"-"\u09c4"] 
	|	["\u09c7"-"\u09c8"] 
	|	["\u09cb"-"\u09cd"] 
	|	["\u09d7"]
	|	["\u09e2"-"\u09e3"] 
	|	["\u0a02"]
	|	["\u0a3c"]
	|	["\u0a3e"-"\u0a42"]
	|	["\u0a47"-"\u0a48"] 
	|	["\u0a4b"-"\u0a4d"] 
	|	["\u0a70"-"\u0a71"] 
	|	["\u0a81"-"\u0a83"]
	|	["\u0abc"]
	|	["\u0abe"-"\u0ac5"] 
	|	["\u0ac7"-"\u0ac9"] 
	|	["\u0acb"-"\u0acd"]
	|	["\u0b01"-"\u0b03"] 
	|	["\u0b3c"]
	|	["\u0b3e"-"\u0b43"] 
	|	["\u0b47"-"\u0b48"]
	|	["\u0b4b"-"\u0b4d"] 
	|	["\u0b56"-"\u0b57"] 
	|	["\u0b82"-"\u0b83"] 
	|	["\u0bbe"-"\u0bc2"]
	|	["\u0bc6"-"\u0bc8"] 
	|	["\u0bca"-"\u0bcd"] 
	|	["\u0bd7"]
	|	["\u0c01"-"\u0c03"]
	|	["\u0c3e"-"\u0c44"] 
	|	["\u0c46"-"\u0c48"] 
	|	["\u0c4a"-"\u0c4d"] 
	|	["\u0c55"-"\u0c56"]
	|	["\u0c82"-"\u0c83"] 
	|	["\u0cbe"-"\u0cc4"] 
	|	["\u0cc6"-"\u0cc8"] 
	|	["\u0cca"-"\u0ccd"]
	|	["\u0cd5"-"\u0cd6"] 
	|	["\u0d02"-"\u0d03"] 
	|	["\u0d3e"-"\u0d43"] 
	|	["\u0d46"-"\u0d48"]
	|	["\u0d4a"-"\u0d4d"] 
	|	["\u0d57"]
	|	["\u0d82"-"\u0d83"] 
	|	["\u0dca"]
	|	["\u0dcf"-"\u0dd4"] 
	|	["\u0dd6"]
	|	["\u0dd8"-"\u0ddf"] 
	|	["\u0df2"-"\u0df3"]
	|	["\u0e31"]
	|	["\u0e34"-"\u0e3a"] 
	|	["\u0e47"-"\u0e4e"] 
	|	["\u0eb1"]
	|	["\u0eb4"-"\u0eb9"] 
	|	["\u0ebb"-"\u0ebc"] 
	|	["\u0ec8"-"\u0ecd"] 
	|	["\u0f18"-"\u0f19"]
	|	["\u0f35"]
	|	["\u0f37"]
	|	["\u0f39"]
	|	["\u0f3e"-"\u0f3f"]
	|	["\u0f71"-"\u0f84"] 
	|	["\u0f86"-"\u0f87"] 
	|	["\u0f90"-"\u0f97"] 
	|	["\u0f99"-"\u0fbc"]
	|	["\u0fc6"]
	|	["\u102c"-"\u1032"] 
	|	["\u1036"-"\u1039"] 
	|	["\u1056"-"\u1059"]
	|	["\u17b4"-"\u17d3"] 
	|	["\u18a9"]
	|	["\u20d0"-"\u20dc"] 
	|	["\u20e1"]
	|	["\u302a"-"\u302f"] 
	|	["\u3099"-"\u309a"] 
	|	["\ufb1e"]
	|	["\ufe20"-"\ufe23"]
	>
|	< UNICODE_DIGIT: 
		["0"-"9"] 
	|	["\u0660"-"\u0669"] 
	|	["\u06f0"-"\u06f9"] 
	|	["\u0966"-"\u096f"]
	|	["\u09e6"-"\u09ef"] 
	|	["\u0a66"-"\u0a6f"] 
	|	["\u0ae6"-"\u0aef"] 
	|	["\u0b66"-"\u0b6f"]
	|	["\u0be7"-"\u0bef"] 
	|	["\u0c66"-"\u0c6f"] 
	|	["\u0ce6"-"\u0cef"] 
	|	["\u0d66"-"\u0d6f"]
	|	["\u0e50"-"\u0e59"] 
	|	["\u0ed0"-"\u0ed9"] 
	|	["\u0f20"-"\u0f29"] 
	|	["\u1040"-"\u1049"]
	|	["\u1369"-"\u1371"] 
	|	["\u17e0"-"\u17e9"] 
	|	["\u1810"-"\u1819"] 
	|	["\uff10"-"\uff19"] 
 	>
|	< UNICODE_CONNECTOR_PUNCTUATION: 
		["_"] 
	|	["\u203f"-"\u2040"]
	|	["\u30fb"] 
	|	["\ufe33"-"\ufe34"]
	|	["\ufe4d"-"\ufe4f"]
	|	["\uff3f"]
	|	["\uff65"]
	>
}

TOKEN:
{
	< UNICODE_ESCAPE_SEQUENCE: "u" <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> >
|	< HEX_DIGIT: ["0"-"9"] | ["a"-"f"] | ["A"-"F"] >
}

/* ECMA-262 5.1 Edition / June 2011 - Section 7.8.5: Regular Expression Literals */

TOKEN :
{
	< REGULAR_EXPRESSION_LITERAL:
		"/" ( (~["\n","\r","\\","/","*"]) | <BACKSLASH_SEQUENCE> ) 
		( (~["\n","\r","\\","/"]) | <BACKSLASH_SEQUENCE> )* "/" (<IDENTIFIER_PART>)*
	>
|
	< #BACKSLASH_SEQUENCE:
		"\\" (~["\n","\r"])
	>
}

/* Java Statements For Descripters Only! */

MORE :
{
	"#" : IN_JAVA_STATEMENT
}

<IN_JAVA_STATEMENT> TOKEN :
{
	<JAVA_STATEMENT:
		(~["#",";","\n","\r","\u2028","\u2029"])* (";" | "\n" | "\r" | "\r\n" | "\u2028" | "\u2029")?
	> : DEFAULT
}

<IN_JAVA_STATEMENT> MORE :
{
	< ~[] >
}
