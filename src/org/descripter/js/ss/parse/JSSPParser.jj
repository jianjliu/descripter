/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. JSSPParser.jj */
/*@egen*/
/*
 *  Descripter 1.0 - Java Script Engines
 *  Copyright (C) 2010-2015  Jianjun Liu (J.J.Liu)
 *  
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *  
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

options {
	                        
	FORCE_LA_CHECK = false;
	JDK_VERSION = "1.6";
	JAVA_UNICODE_ESCAPE = true;
	UNICODE_INPUT = true;
	             
	                            
	                         
	                                            
	                     
	                       
	                        
	STATIC = false;
	               
	                             
	                               
	                       
}

PARSER_BEGIN(JSSPParser)

package org.descripter.js.ss.parse;

public class JSSPParser/*@bgen(jjtree)*/implements JSSPParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTJSSPParserState jjtree = new JJTJSSPParserState();

/*@egen*/
	void jjtreeOpenNodeScope(Node n) {
		((AbstractNode)n).firstToken = getToken(1);
	}

	void jjtreeCloseNodeScope(Node n) {
		((AbstractNode)n).lastToken = getToken(0);
	}
}
PARSER_END(JSSPParser)

SPECIAL_TOKEN :
{
	< LF: "\n" >     /* Line Feed */
|	< CR: "\r" >     /* Carriage Return */
|	< LS: "\u2028" > /* Line separator */
|	< PS: "\u2029" > /* Paragraph separator */
}

MORE [IGNORE_CASE] :
{
	"<%" : IN_SCRIPT
|	"\"" : IN_DOUBLE_STRING
|	"\'" : IN_SINGLE_STRING
}

<IN_SCRIPT> TOKEN :
{
	<SCRIPT: "%>" > : DEFAULT
}

<IN_DOUBLE_STRING> TOKEN :
{
	<DOUBLE_STRING: "\"" > : DEFAULT
}

<IN_SINGLE_STRING> TOKEN :
{
	<SINGLE_STRING: "\'" > : DEFAULT
}

<DEFAULT> TOKEN :
{
	<HTML:
		(
				 ~["<","\"","\'","\n","\r","\u2028","\u2029"]
		|	("<" ~["%","\"","\'","\n","\r","\u2028","\u2029"])
		)*
	> : DEFAULT
}

<IN_DOUBLE_STRING,IN_SINGLE_STRING,IN_SCRIPT,DEFAULT> MORE :
{
	< ~[] >
}

JSSPPage Page()       :
{/*@bgen(jjtree) Page */
  JSSPPage jjtn000 = new JSSPPage(this, JJTPAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Page */
  try {
/*@egen*/
  (
    Script() | Html()
  )*
  < EOF >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void Script()         :
{/*@bgen(jjtree) Script */
        JSSPScript jjtn000 = new JSSPScript(this, JJTSCRIPT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Script */
try {
/*@egen*/
(
	t = < SCRIPT >
)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
        }
/*@egen*/	{
		jjtn000.jjtSetValue(t.image.substring(2, t.image.length() - 2));
	}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtreeCloseNodeScope(jjtn000);
  }
}
/*@egen*/
}

void Html()       :
{/*@bgen(jjtree) Html */
        JSSPHtml jjtn000 = new JSSPHtml(this, JJTHTML);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
/*@egen*/
	Token t;}
{/*@bgen(jjtree) Html */
try {
/*@egen*/
(		t = < DOUBLE_STRING >
	|	t = < SINGLE_STRING >
	|	t = < HTML >
)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
        }
/*@egen*/	{		jjtn000.jjtSetValue(t.image);
	}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtreeCloseNodeScope(jjtn000);
  }
}
/*@egen*/
}
